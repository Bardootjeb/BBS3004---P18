setwd("~/Maastricht University/Biomedical Sciences/BMS year 3/BBS3004 - Critical Review of a Biomedical Intervention/GitHub/BBS3004---P18")
# Check if BiocManager is installed; install it if not
if (!requireNamespace("BiocManager")) {
install.packages("BiocManager")
} else {
message("BiocManager is already installed")
}
# Create vector containing all the packages
packages <- c("DESeq2", "ggplot2", "dplyr", "pheatmap",
"clusterProfiler", "org.Hs.eg.db", "GEOquery")
# Check if required packages is installed; install it if not
if (!requireNamespace(packages)) {
BiocManager::install(packages)
} else {
message("Packages are already installed")
}
# Source files and require data
source("Project.Functions.R")
require(DESeq2)
require(ggplot2)
require(dplyr)
require(GEOquery)
require(tidyr)
require(clusterProfiler)
require(pheatmap)
# Load FPKM normalized data
FPKM_data <- read.delim("FPKM_cufflinks.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# Load metadata using the getGEO function
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
# Extract metadata using pData function
metadata <- pData(phenoData(gse[[1]]))
# Create subset
metadata.subset <- metadata[, c(1, 8, 48, 49, 50, 51, 52, 53, 54, 56)]
# Renaming the colnames to the appropriate names to make it more readable
metadata.subset <- setNames(metadata.subset, c(
"Title", "Source", "Age", "Life_Status", "Sex", "Histology", "Performance",
"Smoking_Status", "Tumor_stage", "Sample"
)[match(names(metadata.subset), c(
"title", "source_name_ch1", "age:ch1", "dead:ch1", "gender:ch1", "histology:ch1", "ps who:ch1",
"smoking:ch1", "stage tnm:ch1", "tumor (t) or normal (n):ch1"
))])
# Set column 'Sample' in metadata.subset as row names in metadata.subset (*to be able to match it later for deseq2 to column names of counts)
rownames(metadata.subset) <- metadata.subset$Sample
# Remove the last row from FPKM_data
FPKM_data <- FPKM_data[-nrow(FPKM_data), ]
# Ensure the output directory exists
if (!dir.exists("Output")) {
dir.create("Output")
}
# Select our the genes of interest B-RAF, K-RAS, EGFR
interest.genes <- c("ENSG00000157764", "ENSG00000133703", "ENSG00000146648")
# Subset our genes of interest into new df by filtering on columns
express <- FPKM_data[rownames(FPKM_data) %in% interest.genes, , drop = FALSE]
# Convert the data into data frame
express <- as.data.frame(express)
# Reshape the expression data to better fit the dataframe
express$Gene <- rownames(express)
express<- reshape2::melt(express, id.vars = "Gene", variable.name = "Sample",
value.name = "Expression")
# Merge with metadata
express <- merge(express, metadata.subset, by = "Sample", all.x = TRUE)
# Plot expression levels of selected genes
# 3 genes separately in 3 plots
gene_colors <- c("pink", "lightblue", "lightgreen")  #create colour data
names(gene_colors) <- interest.genes  #assign a colour to each gene of interest
for(i in interest.genes){eplot <- ggplot(express %>% filter(Gene == i), aes(x = Sample, y = Expression, fill = Gene)) +
geom_col(position = "dodge", fill = gene_colors[i]) +
facet_wrap(~ Gene, scales = "free_y") +
coord_flip() +  # Flip x and y axes
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples 2",
x = "Expression Level",
y = "Sample")
print(eplot)}
# 3 genes together in one plot
save.pdf(function(){
ggplot(express, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate sample labels
}, "Gene Expression")
# Boxplot of gene expression grouped by source
save.pdf(function(){
ggplot(express, aes(x = Source, y = Expression, fill = Source)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Source",
x = "Source",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
}, "Boxplot; Source")
# Boxplot of gene expression grouped by sex
save.pdf(function(){
ggplot(express, aes(x = Sex, y = Expression, fill = Sex)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Sex",
x = "Sex",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
}, "Boxplot; Sex")
# Boxplot of gene expression grouped by smoking status
save.pdf(function(){
ggplot(express, aes(x = Smoking_Status, y = Expression, fill = Smoking_Status)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Smoking Status",
x = "Smoking Status",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
}, "Boxplot; Smoking Status")
# Load the raw counts
raw_counts <- read.delim("Raw_Counts_GSE81089.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# Making sure the row names in metadata.subset matches to column names in raw_counts
all(colnames(raw_counts) %in% rownames(metadata.subset))
# Check if they are in the same order
all(colnames(raw_counts) == rownames(metadata.subset))
# Reorder metadata.subset rows to match the column order in raw_counts
metadata.subset <- metadata.subset[match(colnames(raw_counts), rownames(metadata.subset)), , drop = FALSE]
# Check if they now match
all(colnames(raw_counts) == rownames(metadata.subset))
# Construct a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = raw_counts,
colData = metadata.subset,
design = ~ Source)
print(dds)
# Load the raw counts
raw_counts <- read.delim("Raw_Counts_GSE81089.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# Making sure the row names in metadata.subset matches to column names in raw_counts
all(colnames(raw_counts) %in% rownames(metadata.subset))
# Check if they are in the same order
all(colnames(raw_counts) == rownames(metadata.subset))
# Reorder metadata.subset rows to match the column order in raw_counts
metadata.subset <- metadata.subset[match(colnames(raw_counts), rownames(metadata.subset)), , drop = FALSE]
# Check if they now match
all(colnames(raw_counts) == rownames(metadata.subset))
# Construct a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = raw_counts,
colData = metadata.subset,
design = ~ Source)
print(dds)
# Quality control
# Remove genes with low counts
keep <- rowMeans(counts(dds)) >=10
dds <- dds[keep,]
print(dds)
# Set the Source as factor instead of character
metadata.subset$Source <- as.factor(metadata.subset$Source)
# Sets the human non-malignant tissue as the base for when comparing
metadata.subset$Source <- relevel(metadata.subset$Source, ref = "Human non-malignant tissue")
# Run the DESeq2 differential expression analysis
dds <- DESeq(dds)
# Print a summary of DESeq2 results
print(dds)
# Extract results for Malignant Tissue vs. Human Tissue
res <- results(dds, contrast = c("Source", "Human non-malignant tissue", "Human NSCLC tissue" ))
# View a summary of the results
summary(res)
# Filter for genes with padj < 0.01 (statistically significant) and log2FoldChange > 1 or < -1 (biologically meaningful)
deg_genes <- res[which(res$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
# Check how many significant DEGs were found
nrow(deg_genes)
# Save results to a TSV file for further analysis
write.table(deg_genes, file= "Significant_DEGs.tsv", sep = "\t", col.names = F)
# Convert results to a dataframe
res_df <- as.data.frame(res)
summary(res_df)
# Create a column for significance
res_df$significance <- ifelse(res_df$padj < 0.01 & abs(res_df$log2FoldChange) > 1,
ifelse(res_df$log2FoldChange > 1, "Upregulated", "Downregulated"),
"Not Significant")
print(res_df$significance)
# Plot Volcano Plot
save.pdf(function(){
ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj), color = significance)) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = c(-1, 1), linetype = "dotted", color = "black") +  # Vertical cutoff lines
geom_hline(yintercept = -log10(0.01), linetype = "dotted", color = "black") +  # Horizontal cutoff line
scale_color_manual(values = c("Upregulated" = "red", "Downregulated" = "blue", "Not Significant" = "grey")) +
theme_minimal() +
labs(title = "Volcano Plot of DEGs in NSCLC Tissue vs. Normal Tissue",
x = "Log2 Fold Change",
y = "-Log10 Adjusted P-Value") +
theme(legend.title = element_blank())
}, "Volcano Plot")
plotMA(res)
# First replace NA values with "Control" in metadata
metadata.subset<- metadata.subset%>%
mutate(across(everything(), ~replace_na(.x, "Control")))
# Function to get the results for smoking
DSQ2("Smoking_Status", 3, raw_counts, metadata.subset)
# New function
DSQ2("Sex", "male", raw_counts, metadata.subset)
metadata.subset$Sex <- as.factor(metadata.subset$Sex)
# 2. Construct a DESeqDataSet object
dds_sex <- DESeqDataSetFromMatrix(countData = raw_counts,
colData = metadata.subset,
design = ~ Sex)
# 3. Quality control - Remove genes with low counts
keep <- rowMeans(counts(dds_sex)) >=10
dds_sex <- dds_sex[keep,]
# 4. Set male as the Reference
dds_sex$Sex <- relevel(dds_sex$Sex, ref = "male")
# 5. Run DESeq2
dds_sex <- DESeq(dds_sex)
# 6. Extract DEGs
res_male_vs_female <- results(dds_sex, contrast = c ("Sex", "male", "female"))
# 7. Extract DEGs within each comparison individually
DEGs_male_vs_female <- res_male_vs_female[which(res_male_vs_female$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
# 8. Save to TSV
write.table(DEGs_male_vs_female, file= "DEGs_male_vs_female.tsv", sep = "\t", col.names = F)
print(levels(metadata.subset$Sex))
print(levels(metadata$Sex))
#=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
# Making a function to automate the deseq2 analysis
DSQ2 <- function(variable, ref_level, countdata, metadata){
# Convert the variable to a factor
metadata[[variable]] <- factor(metadata[[variable]])
print(levels(metadata[[variable]]))  # Debugging: Check factor levels
# Construct DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = countdata,
colData = metadata,
design = as.formula(paste("~", variable)))
# Quality control - Remove genes with low counts
keep <- rowMeans(counts(dds)) >= 10
dds <- dds[keep,]
# Set reference level
dds[[variable]] <- relevel(dds[[variable]], ref = ref_level)
# Run DESeq2
dds <- DESeq(dds)
# Get levels for comparison
levels_list <- levels(metadata[[variable]])
# Create file to store results
# Ensure the output directory exists
if (!dir.exists(variable)) {
dir.create(variable)
}
# Extract DEGs for all comparisons
deg_results <- list()
for (lvl in levels_list) {
if (lvl != ref_level) {
res <- results(dds, contrast = c(variable, ref_level, lvl))
degs <- res[which(res$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
# Save results to file
output_file <- file.path(variable, paste0(variable, "_", ref_level, "_vs_", lvl, ".tsv"))
write.table(degs, file = output_file, sep = "\t", col.names = TRUE, row.names = TRUE)
# Store results in a list
deg_results[[paste0(ref_level, "_vs_", lvl)]] <- degs
# Generate volcano plot
plot_volcano(res, title = paste0(variable, "_", ref_level, "_vs_", lvl))
}
}
return(deg_results)
}
# Source files and require data
source("Project.Functions.R")
# New function
DSQ2("Sex", "male", raw_counts, metadata.subset)
print(levels(metadata[[variable]]))
# Source files and require data
source("Project.Functions.R")
# New function
DSQ2("Sex", "male", raw_counts, metadata.subset)
sum(rownames(DEGs_male_vs_female) %in% rownames(deg_results[["male_vs_female"]]))
# Source files and require data
source("Project.Functions.R")
# New function
DSQ2("Sex", "male", raw_counts, metadata.subset)
# Source files and require data
source("Project.Functions.R")
# New function
DSQ2("Sex", "male", raw_counts, metadata.subset)
heatmap_plot(raw_counts, "sex", DEGs_male_vs_female)
intersect(rownames(raw_counts), rownames(DEGs_male_vs_female))
head(DEGs_male_vs_female)
any(is.na(metadata.subset[variable]))
any(is.na(metadata.subset[Sex]))
any(is.na(metadata.subset["Sex"]))
# Subset expression data for DEGs related to your variable
heatmap_data <- raw_counts[rownames(raw_counts) %in% rownames(DEGs_male_vs_female), , drop = FALSE]
# Function to create heatmaps
heatmap_plot <- function(counts_data, variable, DEGs){
# Subset expression data for DEGs related to your variable
heatmap_data <- raw_counts[rownames(raw_counts) %in% rownames(DEGs_male_vs_female), , drop = FALSE]
# Scale the data (row-wise normalization)
heatmap_data <- t(scale(t(heatmap_data)))
# Generate heatmap
pheatmap(heatmap_data,
annotation_col = metadata.subset[variable],
main = "Heatmap of DEGs", variable,
color = colorRampPalette(c("blue", "white", "red"))(50))
}
# Source files and require data
source("Project.Functions.R")
heatmap_plot(raw_counts, "sex", DEGs_male_vs_female)
str(heatmap_data)
heatmap_plot <- function(counts_data, variable, DEGs){
# Ensure matching row names
genes_to_keep <- intersect(rownames(counts_data), rownames(DEGs))
if (length(genes_to_keep) == 0) {
stop("No matching DEGs found in count data.")
}
# Subset expression data for DEGs
heatmap_data <- counts_data[genes_to_keep, , drop = FALSE]
# Scale the data (row-wise normalization)
heatmap_data <- t(scale(t(heatmap_data)))
# Ensure metadata is valid
if (!variable %in% colnames(metadata.subset)) {
stop("Variable not found in metadata.")
}
# Generate heatmap
pheatmap(heatmap_data,
annotation_col = metadata.subset[variable, drop = FALSE],
main = paste("Heatmap of DEGs -", variable),
color = colorRampPalette(c("blue", "white", "red"))(50))
}
# Source files and require data
source("Project.Functions.R")
heatmap_plot(raw_counts, "sex", DEGs_male_vs_female)
common_genes <- intersect(rownames(raw_counts), rownames(DEGs_male_vs_female))
if (length(common_genes) == 0) {
stop("No matching DEGs found in count data.")
}
any(is.na(heatmap_data))
heatmap_plot <- function(counts_data, variable, DEGs){
# Ensure matching row names
genes_to_keep <- intersect(rownames(counts_data), rownames(DEGs))
if (length(genes_to_keep) == 0) {
stop("No matching DEGs found in count data.")
}
# Subset expression data for DEGs
heatmap_data <- counts_data[genes_to_keep, , drop = FALSE]
heatmap_data[is.na(heatmap_data)] <- 0
# Scale the data (row-wise normalization)
heatmap_data <- t(scale(t(heatmap_data)))
# Ensure metadata is valid
if (!variable %in% colnames(metadata.subset)) {
stop("Variable not found in metadata.")
}
# Generate heatmap
pheatmap(heatmap_data,
annotation_col = metadata.subset[variable, drop = FALSE],
main = paste("Heatmap of DEGs -", variable),
color = colorRampPalette(c("blue", "white", "red"))(50))
}
# Source files and require data
source("Project.Functions.R")
heatmap_plot(raw_counts, "sex", DEGs_male_vs_female)
if (length(common_genes) == 0) {
stop("No matching DEGs found in count data.")
}
# Source files and require data
source("Project.Functions.R")
heatmap_plot(raw_counts, "sex", DEGs_male_vs_female)
heatmap_plot <- function(counts_data, variable, DEGs){
# Ensure matching row names
genes_to_keep <- intersect(rownames(counts_data), rownames(DEGs))
if (length(genes_to_keep) == 0) {
stop("No matching DEGs found in count data.")
}
# Subset expression data for DEGs
heatmap_data <- counts_data[genes_to_keep, , drop = FALSE]
# Scale the data (row-wise normalization)
heatmap_data <- t(scale(t(heatmap_data)))
# Ensure metadata is valid
if (!variable %in% colnames(metadata.subset)) {
stop("Variable not found in metadata.")
}
# Generate heatmap
pheatmap(heatmap_data,
annotation_col = metadata.subset[variable, drop = FALSE],
main = paste("Heatmap of DEGs -", variable),
color = colorRampPalette(c("blue", "white", "red"))(50))
}
# Source files and require data
source("Project.Functions.R")
heatmap_plot(raw_counts, "sex", DEGs_male_vs_female)
save.pdf(function(){
plotMA(res)
}, "MA plot")
