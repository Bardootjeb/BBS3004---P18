metadata.subset <- setNames(metadata.subset, c(
"Title", "Source", "Age", "Life_Status", "Sex", "Histology", "Performance",
"Smoking_Status", "Tumor_stage", "Sample"
)[match(names(metadata.subset), c(
"title", "source_name_ch1", "age:ch1", "dead:ch1", "gender:ch1", "histology:ch1", "ps who:ch1",
"smoking:ch1", "stage tnm:ch1", "tumor (t) or normal (n):ch1"
))])
# Set column 'Sample' in metadata.subset as row names in metadata.subset (*to be able to match it later for deseq2 to column names of counts)
rownames(metadata.subset) <- metadata.subset$Sample
# Remove the last row from FPKM_data
head(FPKM_data)
dim(FPKM_data)
FPKM_data <- FPKM_data[-nrow(FPKM_data), ]
# Check if the last row is removed
dim(FPKM_data)  # Check new dimensions
# Ensure the output directory exists
if (!dir.exists("Output")) {
dir.create("Output")
}
# Select our the genes of interest
interest.genes <- c("ENSG00000157764", "ENSG00000133703")
# Subset our genes of interest into new df by filtering on columns
express <- FPKM_data[rownames(FPKM_data) %in% interest.genes, , drop = FALSE]
# Convert the data into data frame
express <- as.data.frame(express)
# Reshape the expression data to better fit the dataframe
express$Gene <- rownames(express)
express<- reshape2::melt(express, id.vars = "Gene", variable.name = "Sample",
value.name = "Expression")
# Merge with metadata
expression <- merge(express, metadata.subset, by = "Sample", all.x = TRUE)
# Plot expression levels of selected genes
save.pdf(function(){
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_col(position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +
coord_flip() +  # Flip x and y axes
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples 2",
x = "Expression Level",
y = "Sample")  # Swap x and y labels accordingly
}, "Sample Gene Expression Levels")
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_col(position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +
coord_flip() +  # Flip x and y axes
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples 2",
x = "Expression Level",
y = "Sample")  # Swap x and y labels accordingly
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))# Rotate sample labels
# Convert Data to a long format (genes in rows, samples in columns)
expression_long <- FPKM_Data %>%
as.data.frame() %>%
rownames_to_column("Gene") %>%
filter(Gene %in% genes_of_interest) %>%
pivot_longer(cols = -Gene, names_to = "Sample", values_to = "Expression")
# Define the genes of interest
genes_of_interest <- c("ENSG00000146648", "ENSG00000133703", "ENSG00000157764")
# Convert Data to a long format (genes in rows, samples in columns)
expression_long <- FPKM_Data %>%
as.data.frame() %>%
rownames_to_column("Gene") %>%
filter(Gene %in% genes_of_interest) %>%
pivot_longer(cols = -Gene, names_to = "Sample", values_to = "Expression")
# Merge expression data with metadata to include sample information
expression_long <- expression_long %>%
left_join(metadata, by = "Sample")
# Making sure the row names in metadata matches to column names in FPKM_Data
all(colnames(FPKM_Data) %in% rownames(metadata))
# Load your Data
FPKM_Data <- read.delim("GSE81089_FPKM_cufflinks.tsv", header=TRUE, row.names=1, sep="\t", check.names = FALSE)
setwd("~/GitHub/BBS3004---P18")
# Load your Data
FPKM_Data <- read.delim("GSE81089_FPKM_cufflinks.tsv", header=TRUE, row.names=1, sep="\t", check.names = FALSE)
# Load Libraries for RNA-seq Data Analysis
library(DESeq2)
library(dplyr)
library(tidyverse)
library(GEOquery)
library(forcats)
# Set your working Directory
setwd("~/Research/PhD/Education/2025/BBS3004/Data/")
# Load your Data
FPKM_Data <- read.delim("GSE81089_FPKM_cufflinks.tsv", header=TRUE, row.names=1, sep="\t", check.names = FALSE)
View(metadata.subset)
View(metadata.subset)
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_col(position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +
coord_flip() +  # Flip x and y axes
theme_minimal() +
theme(axis.text.y = element_text(size = 8)) +  # Reduce y-axis label size
labs(title = "Gene Expression Levels Across Samples 2",
x = "Expression Level",
y = "Sample")  # Swap x and y labels accordingly
expression
expession[2]
expression[2]
expression[1]
sort(expression[1])
tmp <- expression[1]
tmp
class(tmp)
as.character(tmp)
tmp
as.list(tmp)
sort(as.list(tmp))
tmp <- as.list(tmp)
tmp
class(tmp)
sort(tmp)
View(tmp)
tmp[["Sample"]]
tmp <- tmp[["Sample"]]
sort(tmp)
tmp
sort(tmp)
tmp
sort(tmp)
tmp <- expression[1]
sort.DataFrame(tmp)
sort.DataFrame(expression)
sort.DataFrame(tmp, decreasing = TRUE)
substr(string, nchar(string), nchar(string))
lastChar <- function(string){
substr(string, nchar(string), nchar(string))
}
sort_by(tmp, lastChar)
as.vector(tmp)
tmp <- as.vector(tmp)
sort_by(tmp, lastChar())
sort_by(tmp, lastChar)
class(tmp)
as.vector(tmp)
as.vector.data.frame(tmp)
tmp[orde(sapply(tmp, lastChar))]
tmp[order(sapply(tmp, lastChar))]
tmp[order(sapply(tmp, lastChar))]
tmp[order(sapply(tmp, lastChar))]
order(tmp)
sort(tmp)
sapply(tmp, lastChar)
as.numeric(tmp)
as.character(tmp)
factor?
?factor
tmp <- factor(tmp,
levels = tmp[order(substr(tmp, nchar(tmp), nchar(tmp)))])
tmp
View(metadata.subset)
View(metadata)
?DESeqDataSetFromMatrix
tmp[order(unlist(sapply(tmp, lastChar))), ]
tmp[order(unlist(lapply(tmp, lastChar))), ]
lchar <- sapply(tmp, lastChar)
View(FPKM_data)
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_col(position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +
coord_flip() +  # Flip x and y axes
theme_minimal() +
theme(axis.text.y = element_text(size = 8)) +  # Reduce y-axis label size
labs(title = "Gene Expression Levels Across Samples 2",
x = "Expression Level",
y = "Sample")  # Swap x and y labels accordingly
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))# Rotate sample labels
# Select our the genes of interest
interest.genes <- c("ENSG00000157764", "ENSG00000133703")
# Subset our genes of interest into new df by filtering on columns
express <- FPKM_data[rownames(FPKM_data) %in% interest.genes, , drop = FALSE]
# Convert the data into data frame
express <- as.data.frame(express)
# Reshape the expression data to better fit the dataframe
express$Gene <- rownames(express)
express<- reshape2::melt(express, id.vars = "Gene", variable.name = "Sample",
value.name = "Expression")
# Merge with metadata
expression <- merge(express, metadata.subset, by = "Sample", all.x = TRUE)
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_col(position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +
coord_flip() +  # Flip x and y axes
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples 2",
x = "Expression Level",
y = "Sample")  # Swap x and y labels accordingly
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))# Rotate sample labels
# Source files and data
source("Project.Functions.R")
require(DESeq2)
require(ggplot2)
require(dplyr)
require(pheatmap)
require(clusterProfiler)
require(org.Hs.eg.db)
require(GEOquery)
# Select our the genes of interest
interest.genes <- c("ENSG00000157764", "ENSG00000133703")
# Subset our genes of interest into new df by filtering on columns
express <- FPKM_data[rownames(FPKM_data) %in% interest.genes, , drop = FALSE]
# Convert the data into data frame
express <- as.data.frame(express)
# Reshape the expression data to better fit the dataframe
express$Gene <- rownames(express)
express<- reshape2::melt(express, id.vars = "Gene", variable.name = "Sample",
value.name = "Expression")
# Merge with metadata
expression <- merge(express, metadata.subset, by = "Sample", all.x = TRUE)
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_col(position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +
coord_flip() +  # Flip x and y axes
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples 2",
x = "Expression Level",
y = "Sample")  # Swap x and y labels accordingly
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_col(position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +
coord_flip() +  # Flip x and y axes
theme_minimal() +
theme(axis.text.y = element_text(size = 8)) +  # Reduce y-axis label size
labs(title = "Gene Expression Levels Across Samples 2",
x = "Expression Level",
y = "Sample")  # Swap x and y labels accordingly
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))# Rotate sample labels
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))# Rotate sample labels
require(ggplot2)
# Load FPKM normalized data
FPKM_data <- read.delim("FPKM_cufflinks.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))# Rotate sample labels
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 1))# Rotate sample labels
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(just = 1, size = 8))# Rotate sample labels
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text((hjust = 1, size = 8))# Rotate sample labels
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(hjust = 1, size = 8))# Rotate sample labels
ggplot(expression, aes(x = Expression , y = Sample , fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text((hjust = 1, size = 8))# Rotate sample labels
# Plot expression levels of selected genes
ggplot(expression_long, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate sample labels
# Load Libraries for RNA-seq Data Analysis
library(DESeq2)
library(dplyr)
library(tidyverse)
library(GEOquery)
library(forcats)
# Load your Data
FPKM_Data <- read.delim("GSE81089_FPKM_cufflinks.tsv", header=TRUE, row.names=1, sep="\t", check.names = FALSE)
# Load your Data
FPKM_Data <- read.delim("GSE81089_FPKM_cufflinks.tsv", header=TRUE, row.names=1, sep="\t", check.names = FALSE)
setwd("~/GitHub/BBS3004---P18")
# Load your Data
FPKM_Data <- read.delim("GSE81089_FPKM_cufflinks.tsv", header=TRUE, row.names=1, sep="\t", check.names = FALSE)
# get metadata
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
metadata <- pData(phenoData(gse[[1]]))
# Load your Data
FPKM_Data <- read.delim("GSE81089_FPKM_cufflinks.tsv", header=TRUE, row.names=1, sep="\t", check.names = FALSE)
# Load your Data
FPKM_Data <- read.delim("FPKM_cufflinks.tsv", header=TRUE, row.names=1, sep="\t", check.names = FALSE)
# get metadata
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
metadata <- pData(phenoData(gse[[1]]))
head(metadata)  # Have a glimpse of how metadata looks like
# Rename columns in metadata
colnames(metadata)
metadata <- metadata %>%
rename(
Sample = `tumor (t) or normal (n):ch1`,
Source = source_name_ch1,
Tumor_stage = `stage tnm:ch1`,
Age = `age:ch1`,
Sex = `gender:ch1`,
Life_Status = `dead:ch1`,
Smoking_Status = `smoking:ch1`
)
# Check updated column names
colnames(metadata)
# Select only the renamed columns and overwrite metadata
metadata <- metadata %>%
select(Sample, Source, Tumor_stage, Age, Sex, Life_Status, Smoking_Status)
rownames(metadata) <- metadata$Sample
# Check if the changes were applied
head(metadata)
# Remove the last row from Data
head(FPKM_Data)
dim(FPKM_Data)
FPKM_Data <- FPKM_Data[-nrow(FPKM_Data), ]
# Check if the last row is removed
dim(FPKM_Data)  # Check new dimensions
# Making sure the row names in metadata matches to column names in FPKM_Data
all(colnames(FPKM_Data) %in% rownames(metadata))
# Find Columns in Data That Are Not in metadata
setdiff(colnames(FPKM_Data), rownames(metadata))
# Remove everything after the underscore in Data
colnames(FPKM_Data) <- sub("_.*", "", colnames(FPKM_Data))
# Check again if row names in metadata matches to column names in Data
all(colnames(FPKM_Data) %in% rownames(metadata))
# Replace NA values with "Control" in metadata
metadata <- metadata %>%
mutate(across(everything(), ~replace_na(.x, "Control")))
# Define the genes of interest
genes_of_interest <- c("ENSG00000146648", "ENSG00000133703", "ENSG00000157764")
# Convert Data to a long format (genes in rows, samples in columns)
expression_long <- FPKM_Data %>%
as.data.frame() %>%
rownames_to_column("Gene") %>%
filter(Gene %in% genes_of_interest) %>%
pivot_longer(cols = -Gene, names_to = "Sample", values_to = "Expression")
# Merge expression data with metadata to include sample information
expression_long <- expression_long %>%
left_join(metadata, by = "Sample")
# View the structure of the transformed data
head(expression_long)
# Plot expression levels of selected genes
ggplot(expression_long, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate sample labels
# Boxplot of gene expression grouped by sex
ggplot(expression_long, aes(x = Sex, y = Expression, fill = Sex)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Sex",
x = "Sex",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
# Boxplot of gene expression grouped by sex
ggplot(expression_long, aes(x = Sex, y = Expression, fill = Sex)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Sex",
x = "Sex",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
# Plot expression levels of selected genes
ggplot(expression_long, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate sample labels
# Source files and data
source("Project.Functions.R")
require(DESeq2)
require(ggplot2)
require(dplyr)
require(pheatmap)
require(clusterProfiler)
require(org.Hs.eg.db)
require(GEOquery)
# Load FPKM normalized data
FPKM_data <- read.delim("FPKM_cufflinks.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# Looking at the head counts to see the type of data inside
head(FPKM_data)
# Load metadata using the getGEO function
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
# Extract metadata using pData function
metadata <- pData(phenoData(gse[[1]]))
# Look at the data inside. Head gives you the first 6
head(metadata)
# I did colnames to see the different colomns
colnames(metadata)
# Create subset
metadata.subset <- metadata[, c(1, 8, 48, 49, 50, 51, 52, 53, 54, 56)]
# Look at the different names
colnames(FPKM_data)
# Renaming the colnames to the appropriate names to make it more readable
metadata.subset <- setNames(metadata.subset, c(
"Title", "Source", "Age", "Life_Status", "Sex", "Histology", "Performance",
"Smoking_Status", "Tumor_stage", "Sample"
)[match(names(metadata.subset), c(
"title", "source_name_ch1", "age:ch1", "dead:ch1", "gender:ch1", "histology:ch1", "ps who:ch1",
"smoking:ch1", "stage tnm:ch1", "tumor (t) or normal (n):ch1"
))])
# Set column 'Sample' in metadata.subset as row names in metadata.subset (*to be able to match it later for deseq2 to column names of counts)
rownames(metadata.subset) <- metadata.subset$Sample
# Remove the last row from FPKM_data
head(FPKM_data)
dim(FPKM_data)
FPKM_data <- FPKM_data[-nrow(FPKM_data), ]
# Check if the last row is removed
dim(FPKM_data)  # Check new dimensions
# Ensure the output directory exists
if (!dir.exists("Output")) {
dir.create("Output")
}
# Select our the genes of interest
interest.genes <- c("ENSG00000157764", "ENSG00000133703")
# Select our the genes of interest
interest.genes <- c("ENSG00000157764", "ENSG00000133703", "ENSG00000146648")
# Subset our genes of interest into new df by filtering on columns
express <- FPKM_data[rownames(FPKM_data) %in% interest.genes, , drop = FALSE]
# Convert the data into data frame
express <- as.data.frame(express)
# Reshape the expression data to better fit the dataframe
express$Gene <- rownames(express)
express<- reshape2::melt(express, id.vars = "Gene", variable.name = "Sample",
value.name = "Expression")
# Merge with metadata
expression <- merge(express, metadata.subset, by = "Sample", all.x = TRUE)
ggplot(expression, aes(x = Expression , y = Sample , fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text((hjust = 1, size = 8))# Rotate sample labels
ggplot(expression, aes(x = Expression , y = Sample , fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(hjust = 1, size = 8))# Rotate sample labels
