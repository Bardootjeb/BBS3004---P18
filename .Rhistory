setwd("~/Documents/uni/Year 3/bbs3004/BBS3004---P18")
if (!requireNamespace("BiocManager")) {
install.packages("BiocManager")
} else {
message("BiocManager is already installed")
}
# Create vector containing all the packages
packages <- c("DESeq2", "ggplot2", "dplyr", "pheatmap",
"clusterProfiler", "org.Hs.eg.db", "GEOquery")
# Check if required packages is installed; install it if not
if (!requireNamespace(packages)) {
BiocManager::install(packages)
} else {
message("Packages are already installed")
}
source("Project.Functions.R")
require(DESeq2)
require(ggplot2)
require(dplyr)
require(pheatmap)
require(clusterProfiler)
require(org.Hs.eg.db)
require(GEOquery)
#load raw counts
counts <- read.delim("FPKM_cufflinks.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# Looking at the head counts to see the type of data inside
head(counts)
#load metadata using the getGEO function
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
#Extract metadata using pData function
metadata <- pData(phenoData(gse[[1]]))
# Look at the data inside. Head gives you the first 6
head(metadata)
# I did colnames to see the different colomns
colnames(metadata)
# Create subset
metadata.subset <- metadata[, c(1, 8, 48, 49, 50, 51, 52, 53, 54, 56)]
# Look at the different names
colnames(counts)
# Renaming the colnames to the appropriate names to make it more readable
metadata.subset <- setNames(metadata.subset, c(
"Title", "Source", "Age", "Life_Status", "Sex", "Histology", "Performance",
"Smoking_Status", "Tumor_stage", "Sample"
)[match(names(metadata.subset), c(
"title", "source_name_ch1", "age:ch1", "dead:ch1", "gender:ch1", "histology:ch1", "ps who:ch1",
"smoking:ch1", "stage tnm:ch1", "tumor (t) or normal (n):ch1"
))])
View(metadata.subset)
rownames(metadata.subset) <- metadata.subset$Sample
dead <- metadata.subset[, 3]
paste(dead)
# Remove the last row from Data
head(counts)
dim(counts)
counts <- counts[-nrow(counts), ]
dim(counts)  # Check new dimension
if (!dir.exists("Output")) {
dir.create("Output")
}
interest.genes <- c("ENSG00000157764", "ENSG00000133703")
# Subset our genes of interest into new df by filtering on columns
express <- counts[rownames(counts) %in% interest.genes, , drop = FALSE]
express <- as.data.frame(express)
# Reshape the expression data to better fit the dataframe
express$Gene <- rownames(express)
express<- reshape2::melt(express, id.vars = "Gene", variable.name = "Sample",
value.name = "Expression")
expression <- merge(express, metadata.subset, by = "Sample", all.x = TRUE)
View(expression)
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_col(position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +
coord_flip() +  # Flip x and y axes
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Expression Level",
y = "Sample")  # Swap x and y labels accordingly
}, "Sample Gene Expression Levels")
all(colnames(counts) %in% rownames(metadata.subset))
<<<<<<< HEAD
# Looking at the head counts to see the type of data inside
head(counts)
=======
setdiff(colnames(counts), rownames(metadata.subset))
colnames(counts) <- sub("_.*", "", colnames(counts))
colnames(counts)
rownames(metadata)
rownames(metadata.subset)
all(colnames(counts) %in% rownames(metadata.subset))
all(colnames(counts) == rownames(metadata.subset))
metadata.subset <- metadata.subset[match(colnames(counts), rownames(metadata.subset)), , drop = FALSE]
all(colnames(counts) == rownames(metadata.subset))
View(counts)
>>>>>>> 69c71385d4d44360ad011d801cc7586fde65a78d
