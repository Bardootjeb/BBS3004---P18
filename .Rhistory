# Print the first few rows to check
head(df)
View(df)
print(df)
# Put it in a file
write.table(df, "Randomized_Significant_DEGs.tsv", sep = "\t", row.names = TRUE, quote = FALSE)
head(df)
# Put it in a file
write.table(df, "Randomized_Significant_DEGs.txt", sep = "\t", row.names = TRUE, quote = FALSE)
head(df)
# Install packages
install.packages("openxlsx")
library(openxlsx)
setwd("~/GitHub/BBS3004---P18")
# Install packages
install.packages("openxlsx")
library(openxlsx)
setwd("~/GitHub/BBS3004---P18")
# Install packages
install.packages("openxlsx")
library(openxlsx)
# Read the file
df <- read.delim("Significant_DEGs.tsv", header=TRUE, row.names=1, sep="\t", check.names=FALSE)
# Shuffle the rows of the dataframe
df <- df[sample(nrow(df)), ]
# Shuffle only the GeneExpression column (if needed)
if ("GeneExpression" %in% colnames(df)) {
df$GeneExpression <- sample(df$GeneExpression)
}
# Save the modified dataframe
write.table(df, "Randomized_Significant_DEGs.tsv", sep = "\t", row.names = TRUE, quote = FALSE)
# Print the first few rows to check
head(df)
# Put it in a file
write.xlsx(df, "Randomized_Significant_DEGs.xlsx", rowNames = TRUE)
setwd("~/GitHub/BBS3004---P18")
# Read the file
df <- read.delim("Significant_DEGs.tsv", header=TRUE, row.names=1, sep="\t", check.names=FALSE)
# Shuffle the rows of the dataframe
df <- df[sample(nrow(df)), ]
# Shuffle only the GeneExpression column (if needed)
if ("GeneExpression" %in% colnames(df)) {
df$GeneExpression <- sample(df$GeneExpression)
}
# Save the modified dataframe
write.table(df, "Randomized_Significant_DEGs.tsv", sep = "\t", row.names = TRUE, quote = FALSE)
# Print the first few rows to check
head(df)
head(df)
# Read the file
df <- read.delim("Significant_DEGs.tsv", header=TRUE, row.names=1, sep="\t", check.names=FALSE)
# Shuffle the rows of the dataframe
df <- df[sample(nrow(df)), ]
# Shuffle only the GeneExpression column (if needed)
if ("GeneExpression" %in% colnames(df)) {
df$GeneExpression <- sample(df$GeneExpression)
}
# Save the modified dataframe
write.table(df, "Randomized_Significant_DEGs.tsv", sep = "\t", row.names = TRUE, quote = FALSE)
# Print the first few rows to check
head(df)
head(df)
View(df)
# Put it in a file
write.csv(df, "Randomized_Significant_DEGs.csv", row.names = TRUE)
# Check if BiocManager is installed; install it if not
if (!requireNamespace("BiocManager")) {
install.packages("BiocManager")
} else {
message("BiocManager is already installed")
}
# Create vector containing all the packages
packages <- c("DESeq2", "ggplot2", "dplyr", "pheatmap",
"clusterProfiler", "org.Hs.eg.db", "GEOquery")
# Check if required packages is installed; install it if not
if (!requireNamespace(packages)) {
BiocManager::install(packages)
} else {
message("Packages are already installed")
}
# Source files and data
source("Project.Functions.R")
require(DESeq2)
require(ggplot2)
require(dplyr)
require(pheatmap)
require(clusterProfiler)
require(org.Hs.eg.db)
require(GEOquery)
require(tidyr)
# Load FPKM normalized data
FPKM_data <- read.delim("FPKM_cufflinks.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# Looking at the head counts to see the type of data inside
head(FPKM_data)
# Load metadata using the getGEO function
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
# Extract metadata using pData function
metadata <- pData(phenoData(gse[[1]]))
# Look at the data inside. Head gives you the first 6
head(metadata)
# I did colnames to see the different colomns
colnames(metadata)
# Create subset
metadata.subset <- metadata[, c(1, 8, 48, 49, 50, 51, 52, 53, 54, 56)]
# Look at the different names
colnames(FPKM_data)
# Renaming the colnames to the appropriate names to make it more readable
metadata.subset <- setNames(metadata.subset, c(
"Title", "Source", "Age", "Life_Status", "Sex", "Histology", "Performance",
"Smoking_Status", "Tumor_stage", "Sample"
)[match(names(metadata.subset), c(
"title", "source_name_ch1", "age:ch1", "dead:ch1", "gender:ch1", "histology:ch1", "ps who:ch1",
"smoking:ch1", "stage tnm:ch1", "tumor (t) or normal (n):ch1"
))])
# Set column 'Sample' in metadata.subset as row names in metadata.subset (*to be able to match it later for deseq2 to column names of counts)
rownames(metadata.subset) <- metadata.subset$Sample
# Remove the last row from FPKM_data
head(FPKM_data)
dim(FPKM_data)
FPKM_data <- FPKM_data[-nrow(FPKM_data), ]
# Check if the last row is removed
dim(FPKM_data)  # Check new dimensions
# Ensure the output directory exists
if (!dir.exists("Output")) {
dir.create("Output")
}
# Select our the genes of interest B-RAF, K-RAS, EGFR
interest.genes <- c("ENSG00000157764", "ENSG00000133703", "ENSG00000146648")
# Subset our genes of interest into new df by filtering on columns
express <- FPKM_data[rownames(FPKM_data) %in% interest.genes, , drop = FALSE]
# Convert the data into data frame
express <- as.data.frame(express)
# Reshape the expression data to better fit the dataframe
express$Gene <- rownames(express)
express<- reshape2::melt(express, id.vars = "Gene", variable.name = "Sample",
value.name = "Expression")
# Merge with metadata
expression <- merge(express, metadata.subset, by = "Sample", all.x = TRUE)
gene_colors <- c("pink", "lightblue", "lightgreen")  #create colour data
names(gene_colors) <- interest.genes  #assign a colour to each gene of interest
for(i in interest.genes){eplot <- ggplot(expression %>% filter(Gene == i), aes(x = Sample, y = Expression, fill = Gene)) +
geom_col(position = "dodge", fill = gene_colors[i]) +
facet_wrap(~ Gene, scales = "free_y") +
coord_flip() +  # Flip x and y axes
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples 2",
x = "Expression Level",
y = "Sample")
print(eplot)}
# Boxplot of gene expression grouped by source
ggplot(expression, aes(x = Source, y = Expression, fill = Source)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Source",
x = "Source",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
# Boxplot of gene expression grouped by sex
ggplot(expression, aes(x = Sex, y = Expression, fill = Sex)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Sex",
x = "Sex",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
# Boxplot of gene expression grouped by smoking status
ggplot(expression, aes(x = Smoking_Status, y = Expression, fill = Smoking_Status)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Smoking Status",
x = "Smoking Status",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
# Load the raw counts
raw_counts <- read.delim("Raw_Counts_GSE81089.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# Making sure the row names in metadata.subset matches to column names in raw_counts
all(colnames(raw_counts) %in% rownames(metadata.subset))
# Check if they are in the same order
all(colnames(raw_counts) == rownames(metadata.subset))
# Reorder metadata.subset rows to match the column order in raw_counts
metadata.subset <- metadata.subset[match(colnames(raw_counts), rownames(metadata.subset)), , drop = FALSE]
# Check if they now match
all(colnames(raw_counts) == rownames(metadata.subset))
# Check the values in the raw counts
summary(raw_counts)
# Construct a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = raw_counts,
colData = metadata.subset,
design = ~ Source)
print(dds)
# Quality control
# Remove genes with low counts
keep <- rowMeans(counts(dds)) >=10
dds <- dds[keep,]
print(dds)
# Set the factor level
class(metadata.subset$Source)  # Check if it's "character" or "factor"
metadata.subset$Source <- as.factor(metadata.subset$Source)
class(metadata.subset$Source)  # Should now be "factor"
levels(metadata.subset$Source)
# Sets the human non-malignant tissue as the base for when comparing
metadata.subset$Source <- relevel(metadata.subset$Source, ref = "Human non-malignant tissue")
# Run the DESeq2 differential expression analysis
dds <- DESeq(dds)
# Print a summary of DESeq2 results
print(dds)
# Extract results for Malignant Tissue vs. Human Tissue
res <- results(dds, contrast = c("Source", "Human non-malignant tissue", "Human NSCLC tissue" ))
# View a summary of the results
summary(res)
# Filter for genes with padj < 0.01 (statistically significant) and log2FoldChange > 1 or < -1 (biologically meaningful)
deg_genes <- res[which(res$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
# Check how many significant DEGs were found
nrow(deg_genes)
# Save results to a TSV file for further analysis
write.table(deg_genes, file= "Significant_DEGs.tsv", sep = "\t", col.names = F)
# Convert results to a dataframe
res_df <- as.data.frame(res)
# Create a column for significance
res_df$significance <- ifelse(res_df$padj < 0.01 & abs(res_df$log2FoldChange) > 1,
ifelse(res_df$log2FoldChange > 1, "Upregulated", "Downregulated"),
"Not Significant")
print(res_df$significance)
# Plot Volcano Plot
save.pdf(function(){
ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj), color = significance)) +
geom_point(alpha = 0.6) +
#  scale_color_manual(values = c("Upregulated" = "red", "Downregulated" = "blue", "Not Significant" = "grey")) +
theme_minimal() +
labs(title = "Volcano Plot of DEGs", x = "Log2 Fold Change", y = "-Log10 Adjusted P-Value") +
theme(legend.title = element_blank())
}, "Volcano Plot")
setwd("~/GitHub/BBS3004---P18")
# Plot Volcano Plot
save.pdf(function(){
ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj), color = significance)) +
geom_point(alpha = 0.6) +
#  scale_color_manual(values = c("Upregulated" = "red", "Downregulated" = "blue", "Not Significant" = "grey")) +
theme_minimal() +
labs(title = "Volcano Plot of DEGs", x = "Log2 Fold Change", y = "-Log10 Adjusted P-Value") +
theme(legend.title = element_blank())
}, "Volcano Plot")
# First replace NA values with "Control" in metadata
metadata.subset<- metadata.subset%>%
mutate(across(everything(), ~replace_na(.x, "Control")))
DSQ2 <- function(count_data, metadata, variable, ref_level, output_prefix) {
# Convert the variable to a factor
metadata[[variable]] <- as.factor(metadata[[variable]])
# Construct DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = metadata,
design = as.formula(paste("~", variable)))
# Quality control - Remove genes with low counts
keep <- rowMeans(counts(dds)) >= 10
dds <- dds[keep,]
# Set reference level
dds[[variable]] <- relevel(dds[[variable]], ref = ref_level)
# Run DESeq2
dds <- DESeq(dds)
# Get levels for comparison
levels_list <- levels(metadata[[variable]])
# Extract DEGs for all comparisons
deg_results <- list()
for (lvl in levels_list) {
if (lvl != ref_level) {
res <- results(dds, contrast = c(variable, ref_level, lvl))
degs <- res[which(res$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
# Save results to file
output_file <- paste0(output_prefix, "_", ref_level, "_vs_", lvl, ".tsv")
write.table(degs, file = output_file, sep = "\t", col.names = TRUE, row.names = TRUE)
# Store results in a list
deg_results[[paste0(ref_level, "_vs_", lvl)]] <- degs
}
}
return(deg_results)
}
?DSQ2()
?DSQ2
??DSQ2
DSQ2(raw_counts, metadata.subset, Smoking_Status, 3, Smoking)
DSQ2(raw_counts, metadata.subset, Smoking, 3, Smoking)
DSQ2(raw_counts, metadata.subset, Smoking_Status, 3, Smoking)
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=
# DESeq2 for smoking - Anne fleur
# 1. change variables from chracters to factors for 'smoking status' (or gender etc.)
metadata.subset$Smoking_Status <- as.factor(metadata.subset$Smoking_Status)
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=
# DESeq2 for smoking - Anne fleur
# 1. change variables from chracters to factors for 'smoking status' (or gender etc.)
metadata.subset[[Smoking_Status]] <- as.factor(metadata.subset[[Smoking_Status]]
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=
# DESeq2 for smoking - Anne fleur
# 1. change variables from chracters to factors for 'smoking status' (or gender etc.)
metadata.subset[[Smoking_Status]] <- as.factor(metadata.subset[[Smoking_Status]])
# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=-=-=-=
# DESeq2 for smoking - Anne fleur
# 1. change variables from chracters to factors for 'smoking status' (or gender etc.)
metadata.subset[[Smoking_Status]] <- as.factor(metadata.subset[[Smoking_Status]])
DSQ2 <- function(count_data, metadata, variable, ref_level, output_prefix) {
# Convert the variable to a factor
metadata$variable <- as.factor(metadata$variable)
# Construct DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = metadata,
design = as.formula(paste("~", variable)))
# Quality control - Remove genes with low counts
keep <- rowMeans(counts(dds)) >= 10
dds <- dds[keep,]
# Set reference level
dds[[variable]] <- relevel(dds[[variable]], ref = ref_level)
# Run DESeq2
dds <- DESeq(dds)
# Get levels for comparison
levels_list <- levels(metadata[[variable]])
# Extract DEGs for all comparisons
deg_results <- list()
for (lvl in levels_list) {
if (lvl != ref_level) {
res <- results(dds, contrast = c(variable, ref_level, lvl))
degs <- res[which(res$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
# Save results to file
output_file <- paste0(output_prefix, "_", ref_level, "_vs_", lvl, ".tsv")
write.table(degs, file = output_file, sep = "\t", col.names = TRUE, row.names = TRUE)
# Store results in a list
deg_results[[paste0(ref_level, "_vs_", lvl)]] <- degs
}
}
return(deg_results)
}
DSQ2(raw_counts, metadata.subset, Smoking_Status, 3, Smoking)
DSQ2(raw_counts, metadata.subset, Smoking_Status, 3, Smoking)
DSQ2(raw_counts, metadata.subset, Smoking_Status, 3, Smoking)
DSQ2 <- function(count_data, metadata, variable, ref_level, output_prefix) {
# Convert the variable to a factor
metadata$variable <- as.factor(metadata$variable)
# Construct DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = metadata,
design = as.formula(paste("~", variable)))
# Quality control - Remove genes with low counts
keep <- rowMeans(counts(dds)) >= 10
dds <- dds[keep,]
# Set reference level
dds[[variable]] <- relevel(dds[[variable]], ref = ref_level)
# Run DESeq2
dds <- DESeq(dds)
# Get levels for comparison
levels_list <- levels(metadata[[variable]])
# Extract DEGs for all comparisons
deg_results <- list()
for (lvl in levels_list) {
if (lvl != ref_level) {
res <- results(dds, contrast = c(variable, ref_level, lvl))
degs <- res[which(res$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
# Save results to file
output_file <- paste0(output_prefix, "_", ref_level, "_vs_", lvl, ".tsv")
write.table(degs, file = output_file, sep = "\t", col.names = TRUE, row.names = TRUE)
# Store results in a list
deg_results[[paste0(ref_level, "_vs_", lvl)]] <- degs
}
}
return(deg_results)
}
# Convert the variable to a factor
metadata$variable <- as.factor(metadata$variable)
# Construct DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = metadata,
design = as.formula(paste("~", variable)))
DSQ2(raw_counts, metadata.subset, Smoking_Status, 3, Smoking)
DSQ2(raw_counts, metadata.subset, Smoking_Status, 3, Smoking)
DSQ2(raw_counts, metadata.subset, Smoking_Status, 3, Smoking)
DSQ2 <- function(count_data, metadata, variable, ref_level, output_prefix) {
# Convert the variable to a factor
metadata$variable <- as.factor(metadata$variable)
# Construct DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = metadata,
design = as.formula(paste("~", variable)))
# Quality control - Remove genes with low counts
keep <- rowMeans(counts(dds)) >= 10
dds <- dds[keep,]
# Set reference level
dds[[variable]] <- relevel(dds[[variable]], ref = ref_level)
# Run DESeq2
dds <- DESeq(dds)
# Get levels for comparison
levels_list <- levels(metadata[[variable]])
# Extract DEGs for all comparisons
deg_results <- list()
for (lvl in levels_list) {
if (lvl != ref_level) {
res <- results(dds, contrast = c(variable, ref_level, lvl))
degs <- res[which(res$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
# Save results to file
output_file <- paste0(output_prefix, "_", ref_level, "_vs_", lvl, ".tsv")
write.table(degs, file = output_file, sep = "\t", col.names = TRUE, row.names = TRUE)
# Store results in a list
deg_results[[paste0(ref_level, "_vs_", lvl)]] <- degs
}
}
return(deg_results)
}
debug()
debug(DSQ2)
DSQ2 <- function(count_data, metadata, variable, ref_level, output_prefix) {
# Convert the variable to a factor
metadata$variable <- as.factor(metadata$variable)
# Construct DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = metadata,
design = as.formula(paste("~", variable)))
# Quality control - Remove genes with low counts
keep <- rowMeans(counts(dds)) >= 10
dds <- dds[keep,]
# Set reference level
dds[[variable]] <- relevel(dds[[variable]], ref = ref_level)
# Run DESeq2
dds <- DESeq(dds)
# Get levels for comparison
levels_list <- levels(metadata[[variable]])
# Extract DEGs for all comparisons
deg_results <- list()
for (lvl in levels_list) {
if (lvl != ref_level) {
res <- results(dds, contrast = c(variable, ref_level, lvl))
degs <- res[which(res$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
# Save results to file
output_file <- paste0(output_prefix, "_", ref_level, "_vs_", lvl, ".tsv")
write.table(degs, file = output_file, sep = "\t", col.names = TRUE, row.names = TRUE)
# Store results in a list
deg_results[[paste0(ref_level, "_vs_", lvl)]] <- degs
}
}
return(deg_results)
}
DSQ2(raw_counts, metadata.subset, Smoking_Status, 3, Smoking)
DSQ2(raw_counts, metadata.subset, "Smoking_Status", 3, "Smoking")
DSQ2 <- function(count_data, metadata, variable, ref_level, output_prefix) {
# Convert the variable to a factor
metadata$variable <- as.factor(metadata$variable)
# Construct DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = metadata,
design = as.formula(paste("~", variable)))
# Quality control - Remove genes with low counts
keep <- rowMeans(counts(dds)) >= 10
dds <- dds[keep,]
# Set reference level
dds[[variable]] <- relevel(dds[[variable]], ref = ref_level)
# Run DESeq2
dds <- DESeq(dds)
# Get levels for comparison
levels_list <- levels(metadata[[variable]])
# Extract DEGs for all comparisons
deg_results <- list()
for (lvl in levels_list) {
if (lvl != ref_level) {
res <- results(dds, contrast = c(variable, ref_level, lvl))
degs <- res[which(res$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
# Save results to file
output_file <- paste0(output_prefix, "_", ref_level, "_vs_", lvl, ".tsv")
write.table(degs, file = output_file, sep = "\t", col.names = TRUE, row.names = TRUE)
# Store results in a list
deg_results[[paste0(ref_level, "_vs_", lvl)]] <- degs
}
}
return(deg_results)
}
DSQ2(raw_counts, metadata.subset, "Smoking_Status", 3, "Smoking")
DSQ2 <- function(count_data, metadata, variable, ref_level, output_prefix) {
# Convert the variable to a factor
metadata[[variable]] <- as.factor(metadata[[variable]])
# Construct DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = count_data,
colData = metadata,
design = as.formula(paste("~", variable)))
# Quality control - Remove genes with low counts
keep <- rowMeans(counts(dds)) >= 10
dds <- dds[keep,]
# Set reference level
dds[[variable]] <- relevel(dds[[variable]], ref = ref_level)
# Run DESeq2
dds <- DESeq(dds)
# Get levels for comparison
levels_list <- levels(metadata[[variable]])
# Extract DEGs for all comparisons
deg_results <- list()
for (lvl in levels_list) {
if (lvl != ref_level) {
res <- results(dds, contrast = c(variable, ref_level, lvl))
degs <- res[which(res$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
# Save results to file
output_file <- paste0(output_prefix, "_", ref_level, "_vs_", lvl, ".tsv")
write.table(degs, file = output_file, sep = "\t", col.names = TRUE, row.names = TRUE)
# Store results in a list
deg_results[[paste0(ref_level, "_vs_", lvl)]] <- degs
}
}
return(deg_results)
}
DSQ2(raw_counts, metadata.subset, "Smoking_Status", 3, "Smoking")
deg_results
DSQ2(raw_counts, metadata.subset, "Smoking_Status", 3, "Smoking")
