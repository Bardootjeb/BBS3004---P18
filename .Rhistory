require(GEOquery)
if (!requireNamespace("BiocManager")) {
install.packages("BiocManager")
} else {
message("BiocManager is already installed")
}
# Create vector containing all the packages
packages <- c("DESeq2", "ggplot2", "dplyr", "pheatmap",
"clusterProfiler", "org.Hs.eg.db", "GEOquery")
# Check if required packages is installed; install it if not
if (!requireNamespace(packages)) {
BiocManager::install(packages)
} else {
message("Packages are already installed")
}
FPKM_data <- read.delim("FPKM_cufflinks.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# Looking at the head counts to see the type of data inside
head(FPKM_data)
# Load metadata using the getGEO function
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
# Extract metadata using pData function
metadata <- pData(phenoData(gse[[1]]))
# Look at the data inside. Head gives you the first 6
head(metadata)
# I did colnames to see the different colomns
colnames(metadata)
# Create subset
metadata.subset <- metadata[, c(1, 8, 48, 49, 50, 51, 52, 53, 54, 56)]
# Look at the different names
colnames(FPKM_data)
# Renaming the colnames to the appropriate names to make it more readable
metadata.subset <- setNames(metadata.subset, c(
"Title", "Source", "Age", "Life_Status", "Sex", "Histology", "Performance",
"Smoking_Status", "Tumor_stage", "Sample"
)[match(names(metadata.subset), c(
"title", "source_name_ch1", "age:ch1", "dead:ch1", "gender:ch1", "histology:ch1", "ps who:ch1",
"smoking:ch1", "stage tnm:ch1", "tumor (t) or normal (n):ch1"
))])
# Set column 'Sample' in metadata.subset as row names in metadata.subset (*to be able to match it later for deseq2 to column names of counts)
rownames(metadata.subset) <- metadata.subset$Sample
# Remove the last row from FPKM_data
head(FPKM_data)
dim(FPKM_data)
FPKM_data <- FPKM_data[-nrow(FPKM_data), ]
# Check if the last row is removed
dim(FPKM_data)  # Check new dimensions
# Ensure the output directory exists
if (!dir.exists("Output")) {
dir.create("Output")
}
# Load the raw counts
raw_counts <- read.delim("Raw_Counts_GSE81089.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# Making sure the row names in metadata.subset matches to column names in raw_counts
all(colnames(raw_counts) %in% rownames(metadata.subset))
# Check if they are in the same order
all(colnames(raw_counts) == rownames(metadata.subset))
# Reorder metadata.subset rows to match the column order in raw_counts
metadata.subset <- metadata.subset[match(colnames(raw_counts), rownames(metadata.subset)), , drop = FALSE]
# Check if they now match
all(colnames(raw_counts) == rownames(metadata.subset))
# Check the values in the raw counts
summary(raw_counts)
# Construct a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = raw_counts,
colData = metadata.subset,
design = ~ Source)
print(dds)
# Quality control
# Remove genes with low counts
keep <- rowMeans(data(dds)) >=10
keep <- rowMeans(counts(dds)) >=10
dds <- dds[keep,]
print(dds)
View(FPKM_data)
View(raw_counts)
View(dds)
res <- results(dds, contrast = c("Source", "Human non-malignant tissue", "Human NSCLC tissue" ))
class(metadata.subset$Source)  # Check if it's "character" or "factor"
metadata.subset$Source <- as.factor(metadata.subset$Source)
class(metadata.subset$Source)  # Should now be "factor"
levels(metadata.subset$Source)
metadata.subset$Source <- relevel(metadata.subset$Source, ref = "Human non-malignant tissue")
# Run the DESeq2 differential expression analysis
dds <- DESeq(dds)
print(dds)
res <- results(dds, contrast = c("Source", "Human non-malignant tissue", "Human NSCLC tissue" ))
deg_genes <- res[which(res$padj < 0.05 & abs(res$log2FoldChange) > 1), ]
nrow(deg_genes)
head(deg_genes)
View(metadata.subset)
View(metadata.subset)
nsclc_only_metadata <- metadata.subset[metadata.subset$Source == "Human NSCLC tissue", ]
View(nsclc_only_metadata)
nsclc_sample_ids <- rownames(nsclc_only_metadata)
nsclc_only_counts <- raw_counts[, nsclc_sample_ids]
View(nsclc_only_counts)
View(nsclc_only_metadata)
all(colnames(nsclc_only_counts) == rownames(nsclc_only_metadata))
dds_nsclc <- DESeqDataSetFromMatrix(countData = nsclc_only_counts,
colData = nsclc_only_metadata,
design = ~ Smoking_Status)
keep <- rowMeans(counts(dds_nsclc)) >=10
dds_nsclc <- dds_nsclc[keep,]
dds_nsclc$Smoking_Status <- relevel(dds_nsclc$Smoking_Status, ref = "3")
dds_nsclc <- DESeq(dds_nsclc)
print(dds_nsclc)
res_smoking <- results(dds_nsclc, contrast = c("Smoking_Status", "3", "2", "1"))
res_smoking <- results(dds_nsclc, contrast = c ("Smoking_Status", "3", "2", "1"))
res_smoking <- results(dds_nsclc, contrast = c ("Smoking_Status", "3", "1"))
res_never_vs_current <- results(dds_nsclc, contrast = c ("Smoking_Status", "3", "1"))
rm(res_smoking)
res_never_vs_ex <- results(dds_nsclc, contrast = c ("Smoking_Status", "3", "2"))
res_ex_vs_current <- results(dds_nsclc, contrast = c ("Smoking_Status", "1", "2"))
deg_genes <- res_never_vs_current[which(res$padj < 0.05 & abs(res$log2FoldChange) > 1), ]
rm(deg_genes)
extract_degs <- function(res, filename) {
deg_genes <- res[which(res$padj < 0.05 & abs(res$log2FoldChange) > 1), ]
write.csv(deg_genes, file = filename, row.names = TRUE)
extract_degs <- function(res, filename) {
deg_genes <- res[which(res$padj < 0.05 & abs(res$log2FoldChange) > 1), ]
write.csv(deg_genes, file = filename, row.names = TRUE)
}
extract_degs <- function(res, filename) {
deg_genes <- res[which(res$padj < 0.05 & abs(res$log2FoldChange) > 1), ]
write.csv(deg_genes, file = filename, row.names = TRUE)
}
View(extract_degs)
extract_degs(res_never_vs_current,"DEGs_never_vs_current.csv")
deg_genes <- res[which(res$padj < 0.05 & abs(res$log2FoldChange) > 1), ]
nrow(deg_genes)
extract_degs(res_never_vs_current)
rm(extract_degs())
DEGs_never_vs_current <- res_never_vs_current[which(res$padj < 0.05 & abs(res$log2FoldChange) > 1), ]
nrow(DEGs_never_vs_current)
DEGs_never_vs_ex <- res_never_vs_ex[which(res$padj < 0.05 & abs(res$log2FoldChange) > 1), ]
nrow(DEGs_never_vs_ex) # to see how many DEGs there are
rm(DEGs_never_vs_current)
rm(DEGs_never_vs_ex)
DEGs_never_vs_current <- res_never_vs_current[which(res_never_vs_current$padj < 0.05 & abs(res$log2FoldChange) > 1), ]
nrow(DEGs_never_vs_current)
View(DEGs_never_vs_current)
DEGs_never_vs_ex <- res_never_vs_ex[which(res_never_vs_ex$padj < 0.05 & abs(res$log2FoldChange) > 1), ]
nrow(DEGs_never_vs_ex) # to see how many DEGs there are
DEGs_ex_vs_current <- res_ex_vs_current[which(res_ex_vs_current$padj < 0.05 & abs(res$log2FoldChange) > 1), ]
nrow(DEGs_ex_vs_current) # to see how many DEGs there are
View(deg_genes)
DEGs_never_vs_current@rownames
nrow(deg_genes)
deg_genes
write.csv(as.data.frame(deg_genes), "Significant_DEGs.csv")
View(deg_genes)
deg_genes
write.table(deg_genes, file= "Significant_DEGs.tsv", sep = "\t", col.names = F)
deg_genes <- res[which(res$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
nrow(deg_genes)
write.table(deg_genes, file= "Significant_DEGs.tsv", sep = "\t", col.names = F)
write.table(deg_genes, file= "Significant_DEGs.tsv", sep = "\t", col.names = F)
write.table(deg_genes, file= "Significant_DEGs.tsv", sep = "\t", col.names = F)
res_df$significance <- ifelse(res_df$padj < 0.01 & abs(res_df$log2FoldChange) > 1,
ifelse(res_df$log2FoldChange > 1, "Upregulated", "Downregulated"),
"Not Significant")
res_df <- as.data.frame(res)
View(res_df)
write.table(res_df, file= "Significant_DEGs_withcolumnnames.tsv", sep = "\t", col.names = F)
deg_genes <- res[which(res$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
View(deg_genes)
res_df <- as.data.frame(res)
View(res_df)
res_df$significance <- ifelse(res_df$padj < 0.01 & abs(res_df$log2FoldChange) > 1,
ifelse(res_df$log2FoldChange > 1, "Upregulated", "Downregulated"),
"Not Significant")
print(res_df$significance)
rm(nsclc_only_counts)
rm(nsclc_only_metadata)
View(dds_nsclc)
rm(dds_nsclc)
dds_nsclc <- DESeqDataSetFromMatrix(countData = raw_counts,
colData = metadata.subset,
design = ~ Smoking_Status)
View(metadata.subset)
sum(is.na(metadata.subset$Smoking_Status))
nsclc_only_mmetadata <- metadata.subset[!is.na(metadata.subset$Smoking_Status), ]
View(nsclc_only_mmetadata)
all(colnames(raw_counts) == rownames(nsclc_only_metadata))
View(raw_counts)
nsclc_sample_ids <- rownames(nsclc_only_metadata)  # Extract NSCLC sample IDs
nsclc_only_metadata <- metadata.subset[metadata.subset$Source == "Human NSCLC tissue", ]
nsclc_only_metadata <- metadata.subset[!is.na(metadata.subset$Smoking_Status), ]
rm(nsclc_only_metadata)
rm(nsclc_only_mmetadata)
nsclc_only_metadata <- metadata.subset[!is.na(metadata.subset$Smoking_Status), ]
nsclc_sample_ids <- rownames(nsclc_only_metadata)  # Extract NSCLC sample IDs
nsclc_only_counts <- raw_counts[, nsclc_sample_ids]  # Keep only NSCLC samples
all(colnames(nsclc_only_counts) == rownames(nsclc_only_metadata))
dds_nsclc <- DESeqDataSetFromMatrix(countData = raw_counts,
colData = metadata.subset,
design = ~ Smoking_Status)
metadata.subset$Smoking_Status <- as.factor(metadata.subset$Smoking_Status)
dds_nsclc <- DESeqDataSetFromMatrix(countData = raw_counts,
colData = metadata.subset,
design = ~ Smoking_Status)
dds_nsclc <- DESeqDataSetFromMatrix(countData = nsclc_only_counts,
colData = nsclc_only_metadata,
design = ~ Smoking_Status)
View(dds_nsclc)
keep <- rowMeans(counts(dds_nsclc)) >=10
dds_nsclc <- dds_nsclc[keep,]
dds_nsclc$Smoking_Status <- relevel(dds_nsclc$Smoking_Status, ref = "3")
dds_nsclc <- DESeq(dds_nsclc)
# Define the genes of interest
genes_of_interest <- c("ENSG00000146648", "ENSG00000133703", "ENSG00000157764")
# Convert Data to a long format (genes in rows, samples in columns)
expression_long <- FPKM_data %>%
as.data.frame() %>%
rownames_to_column("Gene") %>%
filter(Gene %in% genes_of_interest) %>%
pivot_longer(cols = -Gene, names_to = "Sample", values_to = "Expression")
View(dds_nsclc)
View(dds)
View(DEGs_never_vs_current)
res_never_vs_current <- results(dds_nsclc, contrast = c ("Smoking_Status", "3", "1"))
DEGs_never_vs_current <- res_never_vs_current[which(res_never_vs_current$padj < 0.05 & abs(res$log2FoldChange) > 1), ]
View(DEGs_ex_vs_current)
View(DEGs_never_vs_current)
View(DEGs_never_vs_ex)
DEGs_never_vs_current <- res_never_vs_current[which(res_never_vs_current$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
View(DEGs_ex_vs_current)
View(DEGs_never_vs_current)
View(DEGs_never_vs_ex)
DEGs_never_vs_ex <- res_never_vs_ex[which(res_never_vs_ex$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
View(DEGs_never_vs_ex)
DEGs_ex_vs_current <- res_ex_vs_current[which(res_ex_vs_current$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
View(DEGs_ex_vs_current)
View(DEGs_never_vs_current)
library(tidyverse)
write.table(DEGs_never_vs_current, file= "DEGs_never_vs_current.tsv", sep = "\t", col.names = F)
write.table(DEGs_never_vs_current, file= "DEGs_never_vs_current.tsv", sep = "\t", col.names = F)
expression_long <- FPKM_data %>%
as.data.frame() %>%
rownames_to_column("Gene") %>%
filter(Gene %in% genes_of_interest) %>%
pivot_longer(cols = -Gene, names_to = "Sample", values_to = "Expression")
expression_long <- expression_long %>%
left_join(metadata.subset, by = "Sample")
View(expression_long)
ggplot(expression_long, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate sample labels
ggplot(expression_long, aes(x = Smoking_Status, y = Expression, fill = Smoking_Status)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Sex",
x = "Smoking_Status",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readabi
# Boxplot of gene expression grouped by sex
ggplot(expression_long, aes(x = Smoking_Status, y = Expression, fill = Smoking_Status)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Smoking_Status",
x = "Smoking_Status",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
View(DEGs_never_vs_current)
View(DEGs_never_vs_ex)
View(DEGs_ex_vs_current)
View(res)
View(res_df)
res_df <- data.frame(Gene = rownames(res), res, row.names = NULL)  # Move row names to first column
write.table(res_df, file = "DEG's_CancervsNon_Cancer_Cells.tsv", sep = "\t", quote = FALSE, row.names = FALSE, col.names = TRUE)
summary(res)
expression_long <- FPKM_Data %>%
as.data.frame() %>%
rownames_to_column("Gene") %>%
filter(Gene %in% genes_of_interest) %>%
pivot_longer(cols = -Gene, names_to = "Sample", values_to = "Expression")
expression_long <- FPKM_data %>%
as.data.frame() %>%
rownames_to_column("Gene") %>%
filter(Gene %in% genes_of_interest) %>%
pivot_longer(cols = -Gene, names_to = "Sample", values_to = "Expression")
expression_long <- expression_long %>%
left_join(metadata, by = "Sample")
ggplot(expression_long, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate sample labels
express <- FPKM_data[rownames(FPKM_data) %in% interest.genes, , drop = FALSE]
interest.genes <- c("ENSG00000157764", "ENSG00000133703")
express <- FPKM_data[rownames(FPKM_data) %in% interest.genes, , drop = FALSE]
express <- as.data.frame(express)
express$Gene <- rownames(express)
express<- reshape2::melt(express, id.vars = "Gene", variable.name = "Sample",
value.name = "Expression")
expression <- merge(express, metadata.subset, by = "Sample", all.x = TRUE)
save.pdf(function(){
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_col(position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +
coord_flip() +  # Flip x and y axes
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples 2",
x = "Expression Level",
y = "Sample")  # Swap x and y labels accordingly
}, "Sample Gene Expression Levels")
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_col(position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +
coord_flip() +  # Flip x and y axes
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples 2",
x = "Expression Level",
y = "Sample")  # Swap x and y labels accordingly
}, "Sample Gene Expression Levels")
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))# Rotate sample labels
}, "Sample Gene Expression Levels")
interest.genes <- c("ENSG00000157764", "ENSG00000133703", "ENSG00000146648")
express <- FPKM_data[rownames(FPKM_data) %in% interest.genes, , drop = FALSE]
express <- as.data.frame(express)
express$Gene <- rownames(express)
express<- reshape2::melt(express, id.vars = "Gene", variable.name = "Sample",
value.name = "Expression")
expression <- merge(express, metadata.subset, by = "Sample", all.x = TRUE)
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_col(position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +
coord_flip() +  # Flip x and y axes
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples 2",
x = "Expression Level",
y = "Sample")  # Swap x and y labels accordingly
}, "Sample Gene Expression Levels")
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))# Rotate sample labels
}, "Sample Gene Expression Levels")
ggplot(expression_long, aes(x = Sex, y = Expression, fill = Sex)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Sex",
x = "Sex",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
View(metadata.subset)
ggplot(expression, aes(x = Sex, y = Expression, fill = Sex)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Sex",
x = "Sex",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Smoking Status",
x = "Smoking Status",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
ggplot(expression, aes(x = Smoking_Status, y = Expression, fill = Smoking_Status)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Smoking Status",
x = "Smoking Status",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
ggplot(expression, aes(x = Source, y = Expression, fill = Source)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Sex",
x = "Sex",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
ggplot(expression, aes(x = Source, y = Expression, fill = Source)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Source",
x = "Sex",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
ggplot(expression, aes(x = Source, y = Expression, fill = Source)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Source",
x = "Source",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
View(metadata.subset)
metadata.subset <- metadata.subset %>%
mutate(across(everything(), ~replace_na(.x, "Control")))
View(metadata.subset)
metadata.subset <- metadata.subset %>%
mutate(across(everything(), ~replace_na(.x, "Control")))
dds <- DESeqDataSetFromMatrix(countData = raw_counts,
colData = metadata.subset,
design = ~ Source)
dds1 <- DESeqDataSetFromMatrix(countData = raw_counts,
colData = metadata.subset,
design = ~ Smoking_Status)
metadata.subset <- metadata.subset %>%
mutate(across(everything(), ~replace_na(.x, "Control")))
metadata.subset <- metadata.subset %>%
mutate(across(everything(), ~replace_na(.x, "Control")))
metadata.subset <- metadata.subset %>%
mutate(across(everything(), ~replace_na(.x, "Control")))
metadata.subset <- metadata.subset %>%
mutate(across(everything(), ~replace_na(.x, "Control")))
ggplot(expression, aes(x = , y = Expression, fill = Sex)) +
metadata.subset <- metadata.subset %>%
mutate(across(everything(), ~replace_na(.x, "Control")))
require(dplyr)
metadata.subset <- metadata.subset %>%
mutate(across(everything(), ~replace_na(.x, "Control")))
require(DESeq2)
require(ggplot2)
require(dplyr)
require(pheatmap)
require(clusterProfiler)
require(org.Hs.eg.db)
require(GEOquery)
library(tidyverse)
# Check if BiocManager is installed; install it if not
if (!requireNamespace("BiocManager")) {
install.packages("BiocManager")
} else {
message("BiocManager is already installed")
}
# Create vector containing all the packages
packages <- c("DESeq2", "ggplot2", "dplyr", "pheatmap",
"clusterProfiler", "org.Hs.eg.db", "GEOquery")
# Check if required packages is installed; install it if not
if (!requireNamespace(packages)) {
BiocManager::install(packages)
} else {
message("Packages are already installed")
}
metadata.subset <- metadata.subset %>%
mutate(across(everything(), ~replace_na(.x, "Control")))
rlang::last_trace()
metadata.subset$Smoking_Status <- as.factor(metadata.subset$Smoking_Status)
metadata.subset <- metadata.subset %>%
mutate(across(everything(), ~replace_na(.x, "Control")))
metadata.subset$Smoking_Status <- as.factor(metadata.subset$Smoking_Status)
metadata.subset <- metadata.subset %>%
mutate(across(everything(), ~replace_na(.x, "Control")))
metadata.subset$Smoking_Status <- as.factor(metadata.subset$Smoking_Status)
metadata.subset <- metadata.subset %>%
mutate(across(everything(), ~replace_na(.x, "Control")))
View(metadata.subset)
metadata.subset<- metadata.subset%>%
mutate(across(everything(), ~replace_na(.x, "Control")))
install.packages("tidyr")  # Install if you haven't
library(tidyr)  # Load the package
install.packages("tidyr")
metadata.subset<- metadata.subset%>%
mutate(across(everything(), ~replace_na(.x, "Control"))
metadata.subset<- metadata.subset%>%
install.packages("tidyr")  # Install if you haven't
library(tidyr)  # Load the package
install.packages("tidyr")  # Install if you haven't
library(tidyr)  # Load the package
metadata.subset<- metadata.subset%>%
mutate(across(everything(), ~replace_na(.x, "Control")))
source("Project.Functions.R")
require(DESeq2)
require(ggplot2)
require(dplyr)
require(pheatmap)
require(clusterProfiler)
require(org.Hs.eg.db)
require(GEOquery)
metadata.subset<- metadata.subset%>%
mutate(across(everything(), ~replace_na(.x, "Control")))
