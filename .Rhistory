save.pdf(function(){
ggplot(express, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))  # Rotate sample labels
}, "Gene Expression")
# Boxplot of gene expression grouped by source
save.pdf(function(){
ggplot(express, aes(x = Source, y = Expression, fill = Source)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Source",
x = "Source",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
}, "Boxplot; Source")
# Boxplot of gene expression grouped by sex
save.pdf(function(){
ggplot(express, aes(x = Sex, y = Expression, fill = Sex)) +
geom_boxplot(alpha = 0.7, outlier.shape = NA) +  # Transparent boxplot
geom_jitter(width = 0.2, alpha = 0.6) +  # Adds individual points for visibility
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots for each gene
theme_minimal() +
labs(title = "Gene Expression Levels by Sex",
x = "Sex",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
}, "Boxplot; Sex")
# Load the raw counts
raw_counts <- read.delim("Raw_Counts_GSE81089.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# Making sure the row names in metadata.subset matches to column names in raw_counts
all(colnames(raw_counts) %in% rownames(metadata.subset))
# Check if they are in the same order
all(colnames(raw_counts) == rownames(metadata.subset))
# Reorder metadata.subset rows to match the column order in raw_counts
metadata.subset <- metadata.subset[match(colnames(raw_counts), rownames(metadata.subset)), , drop = FALSE]
# Check if they now match
all(colnames(raw_counts) == rownames(metadata.subset))
# Construct a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = raw_counts,
colData = metadata.subset,
design = ~ Source)
print(dds)
# Quality control
# Remove genes with low counts
keep <- rowMeans(counts(dds)) >=10
dds <- dds[keep,]
print(dds)
# Set the Source as factor instead of character
metadata.subset$Source <- as.factor(metadata.subset$Source)
# Sets the human non-malignant tissue as the base for when comparing
metadata.subset$Source <- relevel(metadata.subset$Source, ref = "Human non-malignant tissue")
# Run the DESeq2 differential expression analysis
dds <- DESeq(dds)
# Print a summary of DESeq2 results
print(dds)
# Extract results for Malignant Tissue vs. Human Tissue
res <- results(dds, contrast = c("Source", "Human non-malignant tissue", "Human NSCLC tissue" ))
# View a summary of the results
summary(res)
# Filter for genes with padj < 0.01 (statistically significant) and log2FoldChange > 1 or < -1 (biologically meaningful)
deg_genes <- res[which(res$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
# Check how many significant DEGs were found
nrow(deg_genes)
# Save results to a TSV file for further analysis
write.table(deg_genes, file= "Significant_DEGs.tsv", sep = "\t", col.names = F)
# Convert results to a dataframe
res_df <- as.data.frame(res)
summary(res_df)
# Create a column for significance
res_df$significance <- ifelse(res_df$padj < 0.01 & abs(res_df$log2FoldChange) > 1,
ifelse(res_df$log2FoldChange > 1, "Upregulated", "Downregulated"),
"Not Significant")
# Print a summary of DESeq2 results
print(dds)
# Extract results for Malignant Tissue vs. Human Tissue
res <- results(dds, contrast = c("Source", "Human non-malignant tissue", "Human NSCLC tissue" ))
# View a summary of the results
summary(res)
# Filter for genes with padj < 0.01 (statistically significant) and log2FoldChange > 1 or < -1 (biologically meaningful)
deg_genes <- res[which(res$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
# Check how many significant DEGs were found
nrow(deg_genes)
# Save results to a TSV file for further analysis
write.table(deg_genes, file= "Significant_DEGs.tsv", sep = "\t", col.names = F)
# Convert results to a dataframe
res_df <- as.data.frame(res)
summary(res_df)
# Create a column for significance
res_df$significance <- ifelse(res_df$padj < 0.01 & abs(res_df$log2FoldChange) > 1,
ifelse(res_df$log2FoldChange > 1, "Upregulated", "Downregulated"),
"Not Significant")
print(res_df$significance)
# Plot Volcano Plot
save.pdf(function(){
ggplot(res_df, aes(x = log2FoldChange, y = -log10(padj), color = significance)) +
geom_point(alpha = 0.6) +
geom_vline(xintercept = c(-1, 1), linetype = "dotted", color = "black") +  # Vertical cutoff lines
geom_hline(yintercept = -log10(0.01), linetype = "dotted", color = "black") +  # Horizontal cutoff line
scale_color_manual(values = c("Upregulated" = "red", "Downregulated" = "blue", "Not Significant" = "grey")) +
theme_minimal() +
labs(title = "Volcano Plot of DEGs in NSCLC Tissue vs. Normal Tissue",
x = "Log2 Fold Change",
y = "-Log10 Adjusted P-Value") +
theme(legend.title = element_blank())
}, "Volcano Plot")
# First replace NA values with "Control" in metadata
metadata.subset<- metadata.subset%>%
mutate(across(everything(), ~replace_na(.x, "Control")))
# Sort the dataset by Age
colData <- metadata.subset %>% arrange(Age)
# Assign variables as numeric
colData$Age <- as.numeric(colData$Age)
# Find the minimum and maximum ages
min_age <- min(colData$Age, na.rm = TRUE)  # Ensure NA values don't break it
max_age <- max(colData$Age, na.rm = TRUE)
# Filter for people within the youngest and oldest 10 year age range
youngest <- colData %>% filter(Age <= (min_age + 10))
oldest <- colData %>% filter(Age >= (max_age - 10))
# Combine the selected groups
selected_samples <- bind_rows(youngest, oldest)
# Convert Age into categorical variable
selected_samples$Age <- ifelse(selected_samples$Age <= (min_age + 10), "Young", "Old")
selected_samples$Age <- factor(selected_samples$Age, levels = c("Young", "Old"))
# function to analyse the rest automatically
DSQ2("Age", "Young")
# function to analyse the rest automatically
DSQ2("Age", "youngest")
# Subset count data to include only selected samples
RCA_subset <- raw_counts[, rownames(selected_samples)]
# function to analyse the rest automatically
DSQ2("Age", "Young")
# Sort the dataset by Age
metadata.subset <- metadata.subset %>% arrange(Age)
# Sort the dataset by Age
metadata.subset <- metadata.subset %>% arrange(Age)
# Assign variables as numeric
metadata.subset$Age <- as.numeric(metadata.subset$Age)
# Find the minimum and maximum ages
min_age <- min(metadata.subset$Age, na.rm = TRUE)  # Ensure NA values don't break it
max_age <- max(metadata.subset$Age, na.rm = TRUE)
# Filter for people within the youngest and oldest 10 year age range
youngest <- metadata.subset %>% filter(Age <= (min_age + 10))
oldest <- metadata.subset %>% filter(Age >= (max_age - 10))
# Combine the selected groups
selected_samples <- bind_rows(youngest, oldest)
# Convert Age into categorical variable
selected_samples$Age <- ifelse(selected_samples$Age <= (min_age + 10), "Young", "Old")
selected_samples$Age <- factor(selected_samples$Age, levels = c("Young", "Old"))
# function to analyse the rest automatically
DSQ2("Age", "Young")
# Extract metadata using pData function
metadata <- pData(phenoData(gse[[1]]))
# Create subset
metadata.subset <- metadata[, c(1, 8, 48, 49, 50, 51, 52, 53, 54, 56)]
# Sort the dataset by Age
colData <- metadata.subset %>% arrange(Age)
# Assign variables as numeric
colData$Age <- as.numeric(colData$Age)
# Find the minimum and maximum ages
min_age <- min(colData$Age, na.rm = TRUE)  # Ensure NA values don't break it
max_age <- max(colData$Age, na.rm = TRUE)
# Sort the dataset by Age
colData <- metadata.subset %>% arrange(Age)
# Sort the dataset by Age
colData <- metadata.subset %>% arrange(age)
# Sort the dataset by Age
colData <- metadata.subset %>% arrange(Age)
# Load metadata using the getGEO function
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
# Extract metadata using pData function
metadata <- pData(phenoData(gse[[1]]))
# Create subset
metadata.subset <- metadata[, c(1, 8, 48, 49, 50, 51, 52, 53, 54, 56)]
# Renaming the colnames to the appropriate names to make it more readable
metadata.subset <- setNames(metadata.subset, c(
"Title", "Source", "Age", "Life_Status", "Sex", "Histology", "Performance",
"Smoking_Status", "Tumor_stage", "Sample"
)[match(names(metadata.subset), c(
"title", "source_name_ch1", "age:ch1", "dead:ch1", "gender:ch1", "histology:ch1", "ps who:ch1",
"smoking:ch1", "stage tnm:ch1", "tumor (t) or normal (n):ch1"
))])
# Set column 'Sample' in metadata.subset as row names in metadata.subset (*to be able to match it later for deseq2 to column names of counts)
rownames(metadata.subset) <- metadata.subset$Sample
# Remove the last row from FPKM_data
FPKM_data <- FPKM_data[-nrow(FPKM_data), ]
# Ensure the output directory exists
if (!dir.exists("Output")) {
dir.create("Output")
}
# Select our the genes of interest B-RAF, K-RAS, EGFR
interest.genes <- c("ENSG00000157764", "ENSG00000133703", "ENSG00000146648")
# Subset our genes of interest into new df by filtering on columns
express <- FPKM_data[rownames(FPKM_data) %in% interest.genes, , drop = FALSE]
# Convert the data into data frame
express <- as.data.frame(express)
# Reshape the expression data to better fit the dataframe
express$Gene <- rownames(express)
express<- reshape2::melt(express, id.vars = "Gene", variable.name = "Sample",
value.name = "Expression")
# Merge with metadata
express <- merge(express, metadata.subset, by = "Sample", all.x = TRUE)
# Making sure the row names in metadata.subset matches to column names in raw_counts
all(colnames(raw_counts) %in% rownames(metadata.subset))
# Check if they are in the same order
all(colnames(raw_counts) == rownames(metadata.subset))
# Reorder metadata.subset rows to match the column order in raw_counts
metadata.subset <- metadata.subset[match(colnames(raw_counts), rownames(metadata.subset)), , drop = FALSE]
# Check if they now match
all(colnames(raw_counts) == rownames(metadata.subset))
# Construct a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = raw_counts,
colData = metadata.subset,
design = ~ Source)
print(dds)
# Quality control
# Remove genes with low counts
keep <- rowMeans(counts(dds)) >=10
dds <- dds[keep,]
print(dds)
# Set the Source as factor instead of character
metadata.subset$Source <- as.factor(metadata.subset$Source)
# Sets the human non-malignant tissue as the base for when comparing
metadata.subset$Source <- relevel(metadata.subset$Source, ref = "Human non-malignant tissue")
# Run the DESeq2 differential expression analysis
dds <- DESeq(dds)
# Print a summary of DESeq2 results
print(dds)
# Extract results for Malignant Tissue vs. Human Tissue
res <- results(dds, contrast = c("Source", "Human non-malignant tissue", "Human NSCLC tissue" ))
# View a summary of the results
summary(res)
# Filter for genes with padj < 0.01 (statistically significant) and log2FoldChange > 1 or < -1 (biologically meaningful)
deg_genes <- res[which(res$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
# Check how many significant DEGs were found
nrow(deg_genes)
# Save results to a TSV file for further analysis
write.table(deg_genes, file= "Significant_DEGs.tsv", sep = "\t", col.names = F)
# Convert results to a dataframe
res_df <- as.data.frame(res)
summary(res_df)
# Create a column for significance
res_df$significance <- ifelse(res_df$padj < 0.01 & abs(res_df$log2FoldChange) > 1,
ifelse(res_df$log2FoldChange > 1, "Upregulated", "Downregulated"),
"Not Significant")
print(res_df$significance)
# Sort the dataset by Age
colData <- metadata.subset %>% arrange(Age)
# Assign variables as numeric
colData$Age <- as.numeric(colData$Age)
# Find the minimum and maximum ages
min_age <- min(colData$Age, na.rm = TRUE)  # Ensure NA values don't break it
max_age <- max(colData$Age, na.rm = TRUE)
# Filter for people within the youngest and oldest 10 year age range
youngest <- colData %>% filter(Age <= (min_age + 10))
oldest <- colData %>% filter(Age >= (max_age - 10))
# Combine the selected groups
selected_samples <- bind_rows(youngest, oldest)
# Convert Age into categorical variable
selected_samples$Age <- ifelse(selected_samples$Age <= (min_age + 10), "Young", "Old")
selected_samples$Age <- factor(selected_samples$Age, levels = c("Young", "Old"))
# function to analyse the rest automatically
DSQ2("Age", "Young")
# Sort the dataset by Age
colData <- metadata.subset %>% arrange(Age)
# Assign variables as numeric
colData$Age <- as.numeric(colData$Age)
# Find the minimum and maximum ages
min_age <- min(colData$Age, na.rm = TRUE)  # Ensure NA values don't break it
max_age <- max(colData$Age, na.rm = TRUE)
# Filter for people within the youngest and oldest 10 year age range
youngest <- colData %>% filter(Age <= (min_age + 10))
oldest <- colData %>% filter(Age >= (max_age - 10))
# Combine the selected groups
selected_samples <- bind_rows(youngest, oldest)
# Convert Age into categorical variable
selected_samples$Age <- ifelse(selected_samples$Age <= (min_age + 10), "Young", "Old")
selected_samples$Age <- factor(selected_samples$Age, levels = c("Young", "Old"))
# function to analyse the rest automatically
DSQ2("Age", "Young")
sum(is.na(selected_samples$Age))
selected_samples <- selected_samples %>% filter(!is.na(Age))
# function to analyse the rest automatically
DSQ2("Age", "Young")
colSums(is.na(selected_samples))
# Filter for people within the youngest and oldest 10 year age range
youngest <- colData %>% filter(Age <= (min_age + 10))
oldest <- colData %>% filter(Age >= (max_age - 10))
# Combine the selected groups
selected_samples <- bind_rows(youngest, oldest)
# Convert Age into categorical variable
selected_samples$AgeGroup <- ifelse(selected_samples$Age <= (min_age + 10), "Young", "Old")
selected_samples$AgeGroup <- factor(selected_samples$AgeGroup, levels = c("Young", "Old"))
# function to analyse the rest automatically
DSQ2("AgeGroup", "Young")
table(selected_samples$AgeGroup)
head(selected_samples)
selected_samples %>% filter(AgeGroup == "Old") %>% head()
levels(selected_samples$AgeGroup)
table(selected_samples$AgeGroup, useNA = "ifany")
sum(is.na(selected_samples$AgeGroup))
filtered_samples <- selected_samples %>% filter(AgeGroup %in% c("Young", "Old"))
dim(filtered_samples)
# function to analyse the rest automatically
DSQ2("AgeGroup", "Young")
# function to analyse the rest automatically
DSQ2("AgeGroup", Young)
# function to analyse the rest automatically
DSQ2(AgeGroup, Young)
# function to analyse the rest automatically
DSQ2("AgeGroup", "Young")
str(selected_samples)
table(selected_samples$AgeGroup)  # Check if "Young" and "Old" exist
levels(selected_samples$AgeGroup)
# function to analyse the rest automatically
DSQ2("AgeGroup", as.character("Young"))
as.character("Young")
# function to analyse the rest automatically
DSQ2("AgeGroup", "Young")
# function to analyse the rest automatically
DSQ2("AgeGroup", "Old")
DSQ2(AgeGroup, "Young")
# function to analyse the rest automatically
DSQ2("AgeGroup", factor("Young", levels = c("Young", "Old")))
young_samples <- selected_samples %>% filter(AgeGroup == "Young")
old_samples <- selected_samples %>% filter(AgeGroup == "Old")
head(young_samples)
head(old_samples)
young_samples
selected_samples <- selected_samples %>% filter(!is.na(AgeGroup))
DSQ2("AgeGroup", "Young")
# Sort the dataset by Age
colData <- metadata.subset %>% arrange(Age)
# Assign variables as numeric
colData$Age <- as.numeric(colData$Age)
# Find the minimum and maximum ages
min_age <- min(colData$Age, na.rm = TRUE)  # Ensure NA values don't break it
max_age <- max(colData$Age, na.rm = TRUE)
# Filter for people within the youngest and oldest 10 year age range
youngest <- colData %>% filter(Age <= (min_age + 10))
oldest <- colData %>% filter(Age >= (max_age - 10))
# Combine the selected groups
selected_samples <- bind_rows(youngest, oldest)
# Convert Age into categorical variable
selected_samples$AgeGroup <- ifelse(selected_samples$Age <= (min_age + 10), "Young", "Old")
selected_samples$AgeGroup <- factor(selected_samples$AgeGroup, levels = c("Young", "Old"))
# function to analyse the rest automatically
DSQ2("AgeGroup", "Young")
# function to analyse the rest automatically
DSQ2("NonexistentColumn", "Young")
# Source files and require data
source("Project.Functions.R")
# function to analyse the rest automatically
DSQ2("AgeGroup", "Young", colData)
head(colData)
selected_samples
# function to analyse the rest automatically
DSQ2("AgeGroup", "Young", selected_samples)
print(dim(raw_counts))       # Check dimensions of raw_counts
print(dim(selected_samples)) # Check dimensions of metadata
setdiff(colnames(raw_counts), selected_samples$Sample)  # Samples missing in metadata
setdiff(selected_samples$Sample, colnames(raw_counts))  # Samples missing in counts
RCA <- raw_counts[, colnames(raw_counts) %in% selected_samples$Sample]
RCA
RCA <- raw_counts[, colnames(raw_counts) %in% selected_samples$Sample]
print(dim(RCA))
print(dim(selected_samples)) # Check dimensions of metadata
print(dim(RCA))
print(dim(selected_samples))
# Source files and require data
source("Project.Functions.R")
# Sort the dataset by Age
colData <- metadata.subset %>% arrange(Age)
# Assign variables as numeric
colData$Age <- as.numeric(colData$Age)
# Find the minimum and maximum ages
min_age <- min(colData$Age, na.rm = TRUE)  # Ensure NA values don't break it
max_age <- max(colData$Age, na.rm = TRUE)
# Filter for people within the youngest and oldest 10 year age range
youngest <- colData %>% filter(Age <= (min_age + 10))
oldest <- colData %>% filter(Age >= (max_age - 10))
# Combine the selected groups
selected_samples <- bind_rows(youngest, oldest)
# Convert Age into categorical variable
selected_samples$AgeGroup <- ifelse(selected_samples$Age <= (min_age + 10), "Young", "Old")
selected_samples$AgeGroup <- factor(selected_samples$AgeGroup, levels = c("Young", "Old"))
RCA <- raw_counts[, colnames(raw_counts) %in% selected_samples$Sample]
# function to analyse the rest automatically
DSQ2("AgeGroup", "Young", RCA, selected_samples)
# Set row names of metadata to Sample IDs
rownames(selected_samples) <- selected_samples$Sample
# Ensure RCA and metadata have the same order
selected_samples <- selected_samples[colnames(RCA), ]
# function to analyse the rest automatically
DSQ2("AgeGroup", "Young", RCA, selected_samples)
AgeGroup_Young_vs_Old.tsv
AgeGroup_Young_vs_Old
age_data <- read.delim("AgeGroup_Young_vs_Old.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
age_data <- read.delim("AgeGroup_Young_vs_Old.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
age_data[1]
age_data[[1]]
require(pheatmap)
plot_volcano(res_control_vs_stage1, "tumorstage 1 vs control")
# 9. Making a plot
plot_volcano(res_ex_vs_current, "Volcano plot Ex vs Current Smokers")
library(pheatmap)
library(RColorBrewer)
plot_heatmap <- function(norm_counts, res, metadata, top_n = 50, title = "Heatmap of Top DEGs") {
# Select significantly differentially expressed genes
sig_genes <- rownames(res[which(res$padj < 0.01 & abs(res$log2FoldChange) > 1), ])
# If too many significant genes, take the top N based on adjusted p-value
if (length(sig_genes) > top_n) {
sig_genes <- head(sig_genes[order(res$padj)], top_n)
}
# Subset the normalized count matrix for selected genes
subset_counts <- norm_counts[sig_genes, ]
# Scale expression values per gene for better visualization
scaled_counts <- t(scale(t(subset_counts)))
# Create a sample annotation dataframe with Smoking_Status
annotation_col <- data.frame(Smoking_Status = metadata$Smoking_Status)
rownames(annotation_col) <- rownames(metadata)
# Define colors for smoking status
annotation_colors <- list(
Smoking_Status = c("1" = "red", "2" = "blue", "3" = "green")  # Adjust colors as needed
)
# Plot the heatmap with sample annotations
pheatmap(scaled_counts,
cluster_rows = TRUE,
cluster_cols = TRUE,
show_rownames = TRUE,
show_colnames = FALSE,
annotation_col = annotation_col,
annotation_colors = annotation_colors,
color = colorRampPalette(c("blue", "white", "red"))(100),
main = title)
}
plot_heatmap <- function(norm_counts, res, top_n = 50, title = "Heatmap of Top DEGs") {
# Subset significant DEGs
sig_genes <- rownames(res[which(res$padj < 0.01 & abs(res$log2FoldChange) > 1), ])
# Take the top N genes by adjusted p-value if too many significant ones exist
if (length(sig_genes) > top_n) {
sig_genes <- head(sig_genes[order(res$padj)], top_n)
}
# Subset normalized count matrix for these genes
subset_counts <- norm_counts[sig_genes, ]
# Scale each gene (row) to have mean = 0 and SD = 1 for better visualization
scaled_counts <- t(scale(t(subset_counts)))
# Plot heatmap
pheatmap(scaled_counts,
cluster_rows = TRUE,
cluster_cols = TRUE,
show_rownames = TRUE,
show_colnames = FALSE,
color = colorRampPalette(c("blue", "white", "red"))(100),
main = title)
}
heatmap_plot(fe)
# Source files and require data
source("Project.Functions.R")
heatmap_plot(raw_counts, "sex", DEGs_male_vs_female)
metadata.subset$Sex <- as.factor(metadata.subset$Sex)
# 2. Construct a DESeqDataSet object
dds_sex <- DESeqDataSetFromMatrix(countData = raw_counts,
colData = metadata.subset,
design = ~ Sex)
# 4. Set male as the Reference
dds_sex$Sex <- relevel(dds_sex$Sex, ref = "male")
# 5. Run DESeq2
dds_sex <- DESeq(dds_sex)
# 6. Extract DEGs
res_male_vs_female <- results(dds_sex, contrast = c ("Sex", "male", "female"))
# 5. Run DESeq2
dds_sex <- DESeq(dds_sex)
# 3. Quality control - Remove genes with low counts
keep <- rowMeans(counts(dds_sex)) >=10
dds_sex <- dds_sex[keep,]
metadata.subset$Sex <- as.factor(metadata.subset$Sex)
# 2. Construct a DESeqDataSet object
dds_sex <- DESeqDataSetFromMatrix(countData = raw_counts,
colData = metadata.subset,
design = ~ Sex)
metadata.subset$Histology <- as.factor(metadata.subset$Histology)
# 2. Construct a DESeqDataSet object
dds_histology <- DESeqDataSetFromMatrix(countData = raw_counts,
colData = metadata.subset,
design = ~ Histology)
## The function makes the rest of the code obsolete
metadata.subset$Smoking_Status <- as.factor(metadata.subset$Smoking_Status)
# 2. Construct a DESeqDataSet object
dds_smoking <- DESeqDataSetFromMatrix(countData = raw_counts,
colData = metadata.subset,
design = ~ Smoking_Status)
setwd("~/Maastricht University/Biomedical Sciences/BMS year 3/BBS3004 - Critical Review of a Biomedical Intervention/GitHub/BBS3004---P18")
## The function makes the rest of the code obsolete
metadata.subset$Smoking_Status <- as.factor(metadata.subset$Smoking_Status)
# 2. Construct a DESeqDataSet object
dds_smoking <- DESeqDataSetFromMatrix(countData = raw_counts,
colData = metadata.subset,
design = ~ Smoking_Status)
# Function to get the results for smoking
DSQ2("Smoking_Status", 3)
# Function to get the results for smoking
DSQ2("Smoking_Status", 3, raw_counts, metadata.subset)
