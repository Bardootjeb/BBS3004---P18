<<<<<<< Updated upstream
q()
q()
load("C:/Users/sabya/Downloads/GSE81089_raw_counts_GRCh38.p13_NCBI.tsv.gz")
load("C:/Users/sabya/Downloads/GSE81089_raw_counts_GRCh38.p13_NCBI.tsv.gz")
load("~/.RData")
load("~/.RData")
GSE81089_raw_counts_GRCh38.p13_NCBI.tsv <- read.delim("C:/Users/sabya/Downloads/GSE81089_raw_counts_GRCh38.p13_NCBI.tsv.gz", header=FALSE)
View(GSE81089_raw_counts_GRCh38.p13_NCBI.tsv)
View(GSE81089_raw_counts_GRCh38.p13_NCBI.tsv)
View(GSE81089_raw_counts_GRCh38.p13_NCBI.tsv)
install.packages("DESeq")
=======
install.packages(c("ggplot2", "dplyr"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
dim(dat)
dim(count_matrix)
setwd("~/Documents/uni/Year 3/bbs3004/BBS3004---P18")
dim(count_matrix)
count_matrix <- read.table("~/Documents/uni/Year 3/bbs3004/BBS3004---P18/rawcounts.tsv", header = TRUE, row.names = 1, sep = "\t")
setwd("~/Documents/uni/Year 3/bbs3004/BBS3004---P18")
libary(dplyr)
libary(dplyr)
install.packages(c("ggplot2", "dplyr"))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
View(count_matrix)
view(gse)
View(gse)
head(metadata)
head(gse)
head(metadata)
#load metadata
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
>>>>>>> Stashed changes
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("DESeq2", "ggplot2", "dplyr", "pheatmap",
"clusterProfiler", "org.Hs.eg.db", "GEOquery"))
<<<<<<< Updated upstream
install.packages("readr")  # For reading TSV files
=======
yes
#load raw counts
counts <- read_tsv("GSE81089_raw_counts_GRCh38.p13_NCBI.tsv")
>>>>>>> Stashed changes
library(DESeq2)
library(ggplot2)
library(dplyr)
library(pheatmap)
library(clusterProfiler)
<<<<<<< Updated upstream
library(org.Hs.eg.db)
library(GEOquery)
library(readr)  # For reading TSV files
library(readxl) # For reading Excel (XLSX) files
#load raw counts
counts <- read_tsv("GSE81089_raw_counts_GRCh38.p13_NCBI.tsv")
view(counts())
#load metadata
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
metadata <- pData(phenoData(gse[[1]]))
head(metadata)
colnames(metadata1)
metadata.subset <- select(metadata, c(1,48, 49, 50, 51, 52, 53, 54, 56))
View(metadata)
counts <- read_tsv("GSE81089_raw_counts_GRCh38.p13_NCBI.tsv")
setwd("~/GitHub/BBS3004---P18")
counts <- read_tsv("GSE81089_raw_counts_GRCh38.p13_NCBI.tsv")
head(counts)
View(counts)
metadata.subset <- select(metadata, c(1,48, 49, 50, 51, 52, 53, 54, 56))
metadata.subset <- select(metadata, c(1,48, 49, 50, 51, 52, 53, 54, 56))
View(metadata)
metadata.subset <- select(metadata, c(1,48, 49, 50, 51, 52, 53, 54, 56))
counts <- as.data.frame(counts)  # Convert tibble to a data frame
head(counts)  # Verify if the first column is GeneID
rownames(counts) <- counts[,1]  # Set the first column as row names
counts <- counts[,-1]  # Remove the GeneID column from the data
head(rownames(counts))  # Should display gene IDs
colnames(counts)  # Should display sample names
View(counts)
setdiff(colnames(counts), rownames(metadata))  # Should return character(0)
setdiff(rownames(metadata), colnames(counts))
rownames(counts) <- counts[,1]  # Set first column (GeneID) as row names
View(metadata)
View(counts)
View(metadata)
counts <- as.data.frame(counts)  # Convert tibble to a data frame
head(counts)  # Verify if the first column is GeneID
rownames(counts) <- counts[,1]  # Set the first column as row names
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
metadata <- pData(phenoData(gse[[1]]))
head(metadata)
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
metadata <- pData(phenoData(gse[[1]]))
head(metadata)
metadata.subset <- select(metadata, c(1,48, 49, 50, 51, 52, 53, 54, 56))
View(metadata)
metadata.subset <- select(metadata, c(1,48, 49, 50, 51, 52, 53, 54, 56))
View(metadata)
require(dplyr)
metadata.subset <- select(metadata, c(1,48, 49, 50, 51, 52, 53, 54, 56))
metadata.subset <- metadata[, c(1, 48, 49, 50, 51, 52, 53, 54, 56)]
head(metadata.subset)
View(metadata.subset)
View(metadata.subset)
View(metadata)
View(metadata)
View(counts)
# Source files and data
=======
#load raw counts
counts <- read_tsv("GSE81089_raw_counts_GRCh38.p13_NCBI.tsv")
install.packages("readr")  # For reading TSV files
#load raw counts
counts <- read_tsv("GSE81089_raw_counts_GRCh38.p13_NCBI.tsv")
#load raw counts
counts <- read_tsv("GSE81089_raw_counts_GRCh38.p13_NCBI.tsv")
install.packages("readr")  # For reading TSV files
setwd("~/Documents/uni/Year 3/bbs3004/BBS3004---P18")
#load raw counts
counts <- read_tsv("GSE81089_raw_counts_GRCh38.p13_NCBI.tsv")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("DESeq2", "ggplot2", "dplyr", "pheatmap",
"clusterProfiler", "org.Hs.eg.db", "GEOquery"))
library(DESeq2)
library(ggplot2)
library(dplyr)
library(pheatmap)
library(clusterProfiler)
#load raw counts
counts <- read_tsv("GSE81089_raw_counts_GRCh38.p13_NCBI.tsv")
View(count_matrix)
#load metadata
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
if (!requireNamespace("BiocManager")) {
install.packages("BiocManager")
} else {
# Welcome to our project. For the code to work, a set of packages have to be
# installed. Follow the following commands to acquire the proper packages.
# Check if BiocManager is installed; install it if not
if (!requireNamespace("BiocManager")) {
install.packages("BiocManager")
} else {
message("BiocManager is already installed")
}
# Create vector containing all the packages
packages <- c("DESeq2", "ggplot2", "dplyr", "pheatmap",
"clusterProfiler", "org.Hs.eg.db", "GEOquery", "readr", "readxl")
if (!requireNamespace(packages)) {
BiocManager::install(packages)
} else {
message("Packages are already installed")
}
# Source files and data
source("Project.Functions.R")
require(DESeq2)
require(ggplot2)
require(dplyr)
require(pheatmap)
require(clusterProfiler)
require(org.Hs.eg.db)
require(GEOquery)
require(readr)  # For reading TSV files
require(readxl) # For reading Excel (XLSX) files
require(readr)  # For reading TSV file
setdiff(colnames(counts), rownames(metadata))  # Should return character(0)
setdiff(rownames(metadata), colnames(counts))  # Should return character(0)
>>>>>>> Stashed changes
source("Project.Functions.R")
require(DESeq2)
require(ggplot2)
require(dplyr)
require(pheatmap)
require(clusterProfiler)
require(org.Hs.eg.db)
require(GEOquery)
<<<<<<< Updated upstream
require(readr)  # For reading TSV files
require(readxl) # For reading Excel (XLSX) files
#load raw counts
counts <- read.delim("FPKM_cufflinks.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
#load raw counts
counts <- read.delim("FPKM_cufflinks.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
head(counts)
setwd("~/BBS Year 3/BBS3004 Project/GitHub/BBS3004---P18")
#load raw counts
counts <- read.delim("FPKM_cufflinks.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
require(readxl) # For reading Excel (XLSX) files
#load raw counts
counts <- read.delim("FPKM_cufflinks.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
#load raw counts
counts <- read.delim("FPKM_cufflinks.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
=======
require(readr)  # For reading TSV file
require(readxl) # For reading Excel (XLSX) files
counts <- read_tsv("GSE81089_raw_counts_GRCh38.p13_NCBI.tsv")
head(counts)
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
View(counts)
if (!requireNamespace("BiocManager")) {
install.packages("BiocManager")
} else {
message("BiocManager is already installed")
}
# Create vector containing all the packages
packages <- c("DESeq2", "ggplot2", "dplyr", "pheatmap",
"clusterProfiler", "org.Hs.eg.db", "GEOquery", "readr", "readxl")
# Check if required packages is installed; install it if not
if (!requireNamespace(packages)) {
BiocManager::install(packages)
} else {
message("Packages are already installed")
}
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
require(GEOquery)
packages <- c("DESeq2", "ggplot2", "dplyr", "pheatmap",
"clusterProfiler", "org.Hs.eg.db", "GEOquery", "readr", "readxl")
# Check if required packages is installed; install it if not
if (!requireNamespace(packages)) {
BiocManager::install(packages)
} else {
message("Packages are already installed")
}
install.packages("GEOquery")
install.packages("BiocManager")
BiocManager::install("GEOquery")
BiocManager::available("GEOquery")
BiocManager::available("GEOquery")
library(GEOquery)
require(GEOquery)
#load metadata
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
if (!requireNamespace(packages)) {
BiocManager::install(packages)
} else {
message("Packages are already installed")
}
packages <- c("DESeq2", "ggplot2", "dplyr", "pheatmap",
"clusterProfiler", "org.Hs.eg.db", "GEOquery", "readr", "readxl")
require(GEOquery)
install.packages("BiocManager")
BiocManager::install("GEOquery")
library(GEOquery)
counts <- read_tsv("GSE81089_raw_counts_GRCh38.p13_NCBI.tsv")
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
setwd("~/Documents/uni/Year 3/bbs3004/BBS3004---P18")
counts <- read_tsv("GSE81089_raw_counts_GRCh38.p13_NCBI.tsv")
require(readr)  # For reading TSV file
counts <- read_tsv("GSE81089_raw_counts_GRCh38.p13_NCBI.tsv")
head(counts)
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
if (!requireNamespace("BiocManager")) {
install.packages("BiocManager")
} else {
message("BiocManager is already installed")
}
packages <- c("DESeq2", "ggplot2", "dplyr", "pheatmap",
"clusterProfiler", "org.Hs.eg.db", "GEOquery", "readr", "readxl")
if (!requireNamespace(packages)) {
BiocManager::install(packages)
} else {
message("Packages are already installed")
}
source("Project.Main.R")
#load raw counts
counts <- read_tsv("GSE81089_raw_counts_GRCh38.p13_NCBI.tsv")
head(counts)
>>>>>>> Stashed changes
# Plot expression levels of selected genes
save.pdf(function(){
ggplot(expression, aes(x = Sample, y = Expression, fill = Gene)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ Gene, scales = "free_y") +  # Separate plots per gene
theme_minimal() +
labs(title = "Gene Expression Levels Across Samples",
x = "Sample",
y = "Expression Level") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))# Rotate sample labels
}, "Sample Gene Expression Levels")
# Source files and data
source("Project.Functions.R")
require(DESeq2)
require(ggplot2)
require(dplyr)
require(pheatmap)
require(clusterProfiler)
require(org.Hs.eg.db)
