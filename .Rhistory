# Check if BiocManager is installed; install it if not
if (!requireNamespace("BiocManager")) {
install.packages("BiocManager")
} else {
message("BiocManager is already installed")
}
setwd("~/Maastricht University/Biomedical Sciences/BMS year 3/BBS3004 - Critical Review of a Biomedical Intervention/GitHub")
# Check if BiocManager is installed; install it if not
if (!requireNamespace("BiocManager")) {
install.packages("BiocManager")
} else {
message("BiocManager is already installed")
}
# Create vector containing all the packages
packages <- c("DESeq2", "ggplot2", "dplyr", "pheatmap",
"clusterProfiler", "org.Hs.eg.db", "GEOquery", "openxlsx")
# Check if required packages is installed; install it if not
if (!requireNamespace(packages)) {
BiocManager::install(packages)
} else {
message("Packages are already installed")
}
# Source files and require data
source("Project.Functions.R")
require(DESeq2)
require(ggplot2)
require(dplyr)
require(GEOquery)
require(tidyr)
require(pheatmap)
library(openxlsx)
# Load FPKM normalized data
FPKM_data <- read.delim("FPKM_cufflinks.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# Load metadata using the getGEO function
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
# Load metadata using the getGEO function
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
# Extract metadata using pData function
metadata <- pData(phenoData(gse[[1]]))
# Create subset
metadata.subset <- metadata[, c(1, 8, 48, 49, 50, 51, 52, 53, 54, 56)]
# Renaming the colnames of the metadata.subset to make it more readable
metadata.subset <- setNames(metadata.subset, c(
"Title", "Source", "Age", "Life_Status", "Sex", "Histology", "Performance",
"Smoking_Status", "Tumor_stage", "Sample"
)[match(names(metadata.subset), c(
"title", "source_name_ch1", "age:ch1", "dead:ch1", "gender:ch1", "histology:ch1", "ps who:ch1",
"smoking:ch1", "stage tnm:ch1", "tumor (t) or normal (n):ch1"
))])
# Set column 'Sample' in metadata.subset as row names in metadata.subset (*to be able to match it later for deseq2 to column names of counts)
rownames(metadata.subset) <- metadata.subset$Sample
# Remove the last row from FPKM_data
FPKM_data <- FPKM_data[-nrow(FPKM_data), ]
# Ensure the output directory exists
if (!dir.exists("Output")) {
dir.create("Output")
}
# Select our the genes of interest B-RAF, K-RAS, EGFR
interest.genes <- c("ENSG00000157764", "ENSG00000133703", "ENSG00000146648")
# Subset our genes of interest into new df by filtering on columns
express <- FPKM_data[rownames(FPKM_data) %in% interest.genes, , drop = FALSE]
# Convert the data into data frame
express <- as.data.frame(express)
# Reshape the expression data to better fit the dataframe
express$Gene <- rownames(express)
express<- reshape2::melt(express, id.vars = "Gene", variable.name = "Sample",
value.name = "Expression")
# Merge with metadata
express <- merge(express, metadata.subset, by = "Sample", all.x = TRUE)
# Plot expression levels of selected genes
# 3 genes separately in 3 plots
gene_colors <- c("pink", "lightblue", "lightgreen")  #create colour data
names(gene_colors) <- interest.genes  #assign a colour to each gene of interest
# Making sure the row names in metadata.subset matches to column names in raw_counts
all(colnames(raw_counts) %in% rownames(metadata.subset))
# Load the raw counts
raw_counts <- read.delim("Raw_Counts_GSE81089.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# Making sure the row names in metadata.subset matches to column names in raw_counts
all(colnames(raw_counts) %in% rownames(metadata.subset))
# Reorder metadata.subset rows to match the column order in raw_counts
metadata.subset <- metadata.subset[match(colnames(raw_counts), rownames(metadata.subset)), , drop = FALSE]
# Construct a DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = raw_counts,
colData = metadata.subset,
design = ~ Source)
# Quality control
# Remove genes with low counts
keep <- rowMeans(counts(dds)) >=10
dds <- dds[keep,]
# Set the Source as factor instead of character
metadata.subset$Source <- as.factor(metadata.subset$Source)
# Sets the human non-malignant tissue as the base for when comparing
metadata.subset$Source <- relevel(metadata.subset$Source, ref = "Human non-malignant tissue")
# Run the DESeq2 differential expression analysis
dds <- DESeq(dds)
# Extract results for Human Tissue vs. Malignant Tissue
res <- results(dds, contrast = c("Source", "Human NSCLC tissue", "Human non-malignant tissue" ))
# Filter for genes with padj < 0.01 (statistically significant) and log2FoldChange > 1 or < -1 (biologically meaningful)
deg_genes <- res[which(res$padj < 0.01 & abs(res$log2FoldChange) > 1), ]
# Save results to a TSV file for further analysis
write.table(deg_genes, file= "Significant_DEGs.tsv", sep = "\t", col.names = F)
# Convert results to a dataframe
res_df <- as.data.frame(res)
# Create a column for significance
res_df$significance <- ifelse(res_df$padj < 0.01 & abs(res_df$log2FoldChange) > 1,
ifelse(res_df$log2FoldChange > 1, "Upregulated", "Downregulated"),
"Not Significant")
# First replace NA values with "Control" in metadata
metadata.subset<- metadata.subset%>%
mutate(across(everything(), ~replace_na(.x, "Control")))
# Sort the dataset by Age
colData <- metadata.subset %>% arrange(Age)
# Assign variables as numeric
colData$Age <- as.numeric(colData$Age)
# Find the minimum and maximum ages
min_age <- min(colData$Age, na.rm = TRUE)  # Ensure NA values don't break it
max_age <- max(colData$Age, na.rm = TRUE)
# Filter for people within the youngest and oldest 10 year age range
youngest <- colData %>% filter(Age <= (min_age + 13))
middle <- colData %>% filter(Age > (min_age + 13) & Age < (max_age - 12))
oldest <- colData %>% filter(Age >= (max_age - 12))
# Combine the selected groups
selected_samples <- bind_rows(youngest, middle, oldest)
# Convert Age into categorical variable
selected_samples$AgeGroup <- case_when(
selected_samples$Age <= (min(selected_samples$Age) + 13) ~ "Young",
selected_samples$Age > (min(selected_samples$Age) + 13) & selected_samples$Age <= (max(selected_samples$Age) - 13) ~ "Middle",
TRUE ~ "Old"  # Default case for remaining values
)
selected_samples <- selected_samples[!duplicated(selected_samples$Sample), ]
# Raw counts have to be adjusted
RCA <- raw_counts[, colnames(raw_counts) %in% selected_samples$Sample]
# Set row names of metadata to Sample IDs
rownames(selected_samples) <- selected_samples$Sample
# Ensure RCA and metadata have the same order
selected_samples <- selected_samples[colnames(RCA), ]
# Age distribution of NSCLC samples
ggplot(colData, aes(x = Age, fill = AgeGroup)) +
geom_histogram(binwidth = 5, color = "black", alpha = 0.5, position = "identity") +
scale_fill_manual(values = c("Youngest" = "blue", "Middle" = "green", "Oldest" = "red")) +
labs(title = "Age Distribution of NSCLC Samples",
x = "Age",
y = "Count",
fill = "Age Group") +
theme_minimal()
# Age distribution of NSCLC samples
ggplot(colData, aes(x = Age, fill = AgeGroup)) +
geom_histogram(binwidth = 5, color = "black", alpha = 0.5, position = "identity") +
scale_fill_manual(values = c("Youngest" = "blue", "Middle" = "green", "Oldest" = "red")) +
labs(title = "Age Distribution of NSCLC Samples",
x = "Age",
y = "Count",
fill = "Age Group") +
theme_minimal()
# Sort the dataset by Age
colData <- metadata.subset %>% arrange(Age)
# Assign variables as numeric
colData$Age <- as.numeric(colData$Age)
# Find the minimum and maximum ages
min_age <- min(colData$Age, na.rm = TRUE)  # Ensure NA values don't break it
max_age <- max(colData$Age, na.rm = TRUE)
# Filter for people within the youngest and oldest 10 year age range
youngest <- colData %>% filter(Age <= (min_age + 13))
middle <- colData %>% filter(Age > (min_age + 13) & Age < (max_age - 12))
oldest <- colData %>% filter(Age >= (max_age - 12))
# Combine the selected groups
selected_samples <- bind_rows(youngest, middle, oldest)
# Convert Age into categorical variable
selected_samples$AgeGroup <- case_when(
selected_samples$Age <= (min(selected_samples$Age) + 13) ~ "Young",
selected_samples$Age > (min(selected_samples$Age) + 13) & selected_samples$Age <= (max(selected_samples$Age) - 13) ~ "Middle",
TRUE ~ "Old"  # Default case for remaining values
)
selected_samples <- selected_samples[!duplicated(selected_samples$Sample), ]
# Raw counts have to be adjusted
RCA <- raw_counts[, colnames(raw_counts) %in% selected_samples$Sample]
# Set row names of metadata to Sample IDs
rownames(selected_samples) <- selected_samples$Sample
# Ensure RCA and metadata have the same order
selected_samples <- selected_samples[colnames(RCA), ]
# Age distribution of NSCLC samples
ggplot(colData, aes(x = Age, fill = AgeGroup)) +
geom_histogram(binwidth = 5, color = "black", alpha = 0.5, position = "identity") +
scale_fill_manual(values = c("Youngest" = "blue", "Middle" = "green", "Oldest" = "red")) +
labs(title = "Age Distribution of NSCLC Samples",
x = "Age",
y = "Count",
fill = "Age Group") +
theme_minimal()
# Age distribution of NSCLC samples
ggplot(colData, aes(x = Age, fill = ColData$AgeGroup)) +
geom_histogram(binwidth = 5, color = "black", alpha = 0.5, position = "identity") +
scale_fill_manual(values = c("Youngest" = "blue", "Middle" = "green", "Oldest" = "red")) +
labs(title = "Age Distribution of NSCLC Samples",
x = "Age",
y = "Count",
fill = "Age Group") +
theme_minimal()
# Age distribution of NSCLC samples
ggplot(colData, aes(x = Age, fill = colData$AgeGroup)) +
geom_histogram(binwidth = 5, color = "black", alpha = 0.5, position = "identity") +
scale_fill_manual(values = c("Youngest" = "blue", "Middle" = "green", "Oldest" = "red")) +
labs(title = "Age Distribution of NSCLC Samples",
x = "Age",
y = "Count",
fill = "Age Group") +
theme_minimal()
# Age distribution of NSCLC samples
ggplot(colData, aes(x = Age, fill = AgeGroup)) +
geom_histogram(binwidth = 5, color = "black", alpha = 0.5, position = "identity") +
scale_fill_manual(values = c("Youngest" = "blue", "Middle" = "green", "Oldest" = "red")) +
labs(title = "Age Distribution of NSCLC Samples",
x = "Age",
y = "Count",
fill = "Age Group") +
theme_minimal()
#GRP, CHGA, ABCC2, THBD
ensembl_ids <- c("ENSG00000134443", "ENSG00000100604", "ENSG00000023839", "ENSG00000178726") # Add your full list here
# extract old vs young data
OldvsYoung <- read.delim("AgeGroup_Old_vs_Young.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# Filter the results table for only these Ensembl IDs
filtered_results <- OldvsYoung[rownames(OldvsYoung) %in% ensembl_ids, ]
# Classify genes as Upregulated, Downregulated, or Not Significant
filtered_results$Significance <- case_when(
filtered_results$padj < 0.05 & filtered_results$log2FoldChange > 1  ~ "Upregulated",
filtered_results$padj < 0.05 & filtered_results$log2FoldChange < -1 ~ "Downregulated",
TRUE ~ "Not significant"
)
# Ensure log2FoldChange is numeric
filtered_results$log2FoldChange <- as.numeric(filtered_results$log2FoldChange)
# Remove any rows with NA values after conversion
filtered_results <- na.omit(filtered_results)
# Create a numeric matrix with row names as Gene IDs
gene_expression_matrix <- matrix(
filtered_results$log2FoldChange,
nrow = nrow(filtered_results),
dimnames = list(rownames(filtered_results), "log2FoldChange")
)
# Check if all values are numeric
print(str(gene_expression_matrix))  # This should return "num"
# Create a heatmap
pheatmap(
gene_expression_matrix,
cluster_rows = TRUE,
cluster_cols = FALSE,
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Expression of Selected Genes in NSCLC"
)
healthy_metadata <- data.frame(
sample = c("L511N", "L532N", "L561N", "L563N", "L566N", "L572N", "L606N", "L616N", "L644N", "L656N", "L661N",
"L682N", "L723N", "L724N", "L736N",  "L738N",  "L809N", "L831N", "L881N"),
Years = c(56, 69, 62,61, 58, 58, 55, 54, 67, 58, 66, 64, 67, 67, 67, 74, 72, 62, 70),
Sex = c("female", "female", "female", "female", "male", "male", "male", "male", "male",
"male", "male", "female", "male", "female", "male", "female", "male", "female", "male")
)
rownames(healthy_metadata) <- healthy_metadata$sample
# Convert Years to numeric for classification
healthy_metadata$Years <- as.numeric(as.character(healthy_metadata$Years))
# Apply Year Group classification
healthy_metadata$YearGroup <- case_when(
healthy_metadata$Years <= 58 ~ "Young",
healthy_metadata$Years >= 72 ~ "Old",
TRUE ~ "Middle"
)
# Convert YearGroup to a factor
healthy_metadata$YearGroup <- factor(healthy_metadata$YearGroup, levels = c("Young", "Middle", "Old"))
# Filter raw_counts to include only the healthy samples
healthy_counts <- raw_counts[, rownames(healthy_metadata)]
# Check if sample matching worked
all(colnames(healthy_counts) == rownames(healthy_metadata))
# Plot the histogram for healthy data with 'Years' as the x-axis
ggplot(healthy_metadata, aes(x = Years, fill = YearGroup)) +
geom_histogram(binwidth = 3, color = "black", alpha = 0.5, position = "identity") +  # Adjust binwidth if needed
scale_fill_manual(values = c("Young" = "blue", "Middle" = "green", "Old" = "red")) +
labs(title = "Age Distribution of Healthy Samples",
x = "Years",
y = "Count",
fill = "Year Group") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Step 1: Extract Gene Expression for Selected Genes
selected_genes <- rownames(filtered_results)  # Extract ENSG IDs from filtered results
gene_expression <- raw_counts[rownames(raw_counts) %in% selected_genes, ]
# Step 2: Normalize Expression (log2 + 1 transformation)
log_gene_expression <- log2(as.matrix(gene_expression) + 1)
# Step 3: Split Data into Healthy & Disease Groups
# Order columns for Healthy: Young -> Middle -> Old
healthy_samples <- selected_samples$Sample
healthy_expression <- log_gene_expression[, colnames(log_gene_expression) %in% healthy_samples]
healthy_expression <- healthy_expression[, selected_samples$Sample]  # Ensure proper order
# Order columns for Disease: Normal -> Tumor
disease_samples <- colnames(log_gene_expression)[!colnames(log_gene_expression) %in% healthy_samples]
disease_expression <- log_gene_expression[, disease_samples]
# Step 4: Create Column Annotations
# Healthy Annotation (Age Groups)
annotation_healthy <- data.frame(AgeGroup = selected_samples$AgeGroup)
rownames(annotation_healthy) <- selected_samples$Sample
# Disease Annotation (Tumor vs. Normal)
sample_types <- ifelse(grepl("T$", colnames(disease_expression)), "Tumor", "Normal")
annotation_disease <- data.frame(Type = factor(sample_types, levels = c("Normal", "Tumor")))
View(annotation_disease)
View(annotation_healthy)
rownames(annotation_disease) <- colnames(disease_expression)
# Step 5: Merge & Order Data
ordered_columns <- c(colnames(healthy_expression), colnames(disease_expression))
final_expression_matrix <- log_gene_expression[, ordered_columns]
# Make sure both annotation data frames have the same column name
colnames(annotation_healthy) <- "Type"  # For example, healthy samples are labeled as 'Type'
colnames(annotation_disease) <- "Type"  # Ensure disease samples have the same column name
# Ensure row names (Sample IDs) match between annotation and expression data
rownames(annotation_healthy) <- selected_samples$Sample  # Use the correct sample names for healthy data
rownames(annotation_disease) <- colnames(disease_expression)  # Ensure disease sample names match
# Now you can bind them safely (annotation_healthy + annotation_disease)
annotation_col <- rbind(annotation_healthy, annotation_disease)
# Now you can create the heatmap
pheatmap(final_expression_matrix,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "row",
show_rownames = TRUE,
show_colnames = TRUE,
annotation_col = annotation_col,  # Apply the combined annotation
gaps_col = length(colnames(healthy_expression)),  # Add gap between healthy and disease
main = "Heatmap of Selected Genes (Healthy vs. Disease)")
# Insert MOET output, ie the genes from the DEGs associated with lungdisease
moetgenessource <- read.table("MOET genes lung cancer source ensg.txt", header = FALSE, stringsAsFactors = FALSE)
colnames(moetgenessource) <- c("Gene_Symbol")
# Check overlap with expression data
overlap_moetgenessource <- moetgenessource$Gene_Symbol[moetgenessource$Gene_Symbol %in% rownames(raw_counts)]
# Subset the data for MOET genes
expression_moetgenessource <- raw_counts[rownames(raw_counts) %in% overlap_moetgenessource, ]
# Normalize it
log_overlap_moetgenessource <- log2(as.matrix(expression_moetgenessource) + 1)
# Split Heat Map into 2, Healthy & Non-Healthy
# Separate Tumor (“T”) and Normal (“N”) Samples
# Select columns ending with "T"
tumor_samples <- log_overlap_moetgenessource[, grep("T$", colnames(log_overlap_moetgenessource))]
# Select columns ending with "N"
normal_samples <- log_overlap_moetgenessource[, grep("N$", colnames(log_overlap_moetgenessource))]
### Put them All in One figure
# Order columns: Normal (N) first, Tumor (T) second
ordered_columns <- c(grep("N$", colnames(log_overlap_moetgenessource), value = TRUE),
grep("T$", colnames(log_overlap_moetgenessource), value = TRUE))
log_overlap_moetgenessource <- log_overlap_moetgenessource[, ordered_columns]
# Create a column annotation to distinguish Tumor vs. Normal
sample_types <- ifelse(grepl("T$", colnames(log_overlap_moetgenessource)), "Tumor", "Normal")
annotation_col <- data.frame(Type = factor(sample_types, levels = c("Normal", "Tumor")))
rownames(annotation_col) <- colnames(log_overlap_moetgenessource)
# Plot the heatmap
pheatmap(log_overlap_moetgenessource,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "row",
show_rownames = TRUE,
show_colnames = TRUE,
annotation_col = annotation_col,  # Highlight Tumor vs. Normal
gaps_col = length(grep("N$", colnames(log_overlap_moetgenessource))), # Add gap between groups
main = "Heatmap of MOET Genes (Normal vs. Tumor)")
