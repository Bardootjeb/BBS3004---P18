q()
q()
load("C:/Users/sabya/Downloads/GSE81089_raw_counts_GRCh38.p13_NCBI.tsv.gz")
load("C:/Users/sabya/Downloads/GSE81089_raw_counts_GRCh38.p13_NCBI.tsv.gz")
load("~/.RData")
load("~/.RData")
GSE81089_raw_counts_GRCh38.p13_NCBI.tsv <- read.delim("C:/Users/sabya/Downloads/GSE81089_raw_counts_GRCh38.p13_NCBI.tsv.gz", header=FALSE)
View(GSE81089_raw_counts_GRCh38.p13_NCBI.tsv)
View(GSE81089_raw_counts_GRCh38.p13_NCBI.tsv)
View(GSE81089_raw_counts_GRCh38.p13_NCBI.tsv)
install.packages("DESeq")
counts <- read_tsv("GSE81089_raw_counts_GRCh38.p13_NCBI.tsv")
library(readr)  # For reading TSV files
library(readxl) # For reading Excel (XLSX) files
counts <- read_tsv("GSE81089_raw_counts_GRCh38.p13_NCBI.tsv")
setwd("~/GitHub")
setwd("~/GitHub/BBS3004---P18")
library(readr)  # For reading TSV files
counts <- read_tsv("GSE81089_raw_counts_GRCh38.p13_NCBI.tsv")
metadata <- read_excel("SraRunTable Population data.xlsx")
library(readxl) # For reading Excel (XLSX) files
metadata <- read_excel("SraRunTable Population data.xlsx")
metadata <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
library(GEOquery)
metadata <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
metadata
metadata1 <- pData(phenoData(gse[[1]]))
metadata1 <- pData(phenoData(metadata[[1]]))
head(metadata1)
View(metadata1)
colnames(metadata1)
gse <- getGEO(GEO = 'GSE81089', GSEMatrix = TRUE)
metadata <- pData(phenoData(gse[[1]]))
head(metadata)
View(metadata1)
View(metadata)
View(metadata1)
metadata %>%
select(1,48,49,50,51,52,53,54,56)
library(dplyr)
metadata %>%
select(1,48,49,50,51,52,53,54,56)
head()
metadata %>%
select(1,48,49,50,51,52,53,54,56)
head()
head()
metadata.subset <- select(metadata, c(1,48, 49, 50, 51, 52, 53, 54, 56))
head()
metadata.subset <- select(metadata, c(1,48, 49, 50, 51, 52, 53, 54, 56))
head(metadata.subset)
metadata <- as.data.frame(metadata)  # Convert to a proper data frame
head(metadata)  # Should now display correctly
metadata.subset <- select(metadata, c(1,48, 49, 50, 51, 52, 53, 54, 56))
head(metadata.subset)
metadata <- as.data.frame(metadata)  # Convert to a proper data frame
head(metadata)  # Should now display correctly
View(metadata.subset)
head(counts)
setdiff(colnames(counts), rownames(metadata.subset)  # Check if sample names in counts are in metadata
setdiff(rownames(metadata.subset, colnames(counts))  # Check if sample names in metadata are in counts
setdiff(colnames(counts), rownames(metadata.subset)  # Check if sample names in counts are in metadata
setdiff(rownames(metadata.subset, colnames(counts))  # Check if sample names in metadata are in counts
setdiff(colnames(counts), rownames(metadata.subset)
setdiff(rownames(metadata.subset, colnames(counts))
setdiff(rownames(metadata.subset) colnames(counts))
setdiff(colnames(counts), rownames(metadata.subset))
setdiff(rownames(metadata.subset), colnames(counts))
setdiff(colnames(counts), rownames(metadata.subset))  # Check if sample names in counts are in metadata
setdiff(rownames(metadata.subset), colnames(counts))
View(counts)
rownames(counts) <- counts[,1]  # Set first column (GeneID) as row names
View(gse)
View(metadata.subset)
View(counts)
counts <- as.data.frame(counts)  # Convert tibble to a data frame
setdiff(colnames(counts), rownames(metadata.subset))  # Check if sample names in counts are in metadata
setdiff(rownames(metadata.subset), colnames(counts))
View(metadata)
View(metadata)
counts <- as.data.frame(counts)  # Convert tibble to a data frame
head(counts)  # Verify if the first column is GeneID
rownames(counts) <- counts[,1]  # Set the first column as row names
counts <- counts[,-1]  # Remove the GeneID column from the data
head(rownames(counts))  # Should display gene IDs
colnames(counts)  # Should display sample names
setdiff(colnames(counts), rownames(metadata))  # Should return character(0)
setdiff(rownames(metadata), colnames(counts))
if (!requireNamespace("BiocManager", quietly = TRUE))
