theme_minimal()
# Age distribution of NSCLC samples
ggplot(colData, aes(x = Age, fill = AgeGroup)) +
geom_histogram(binwidth = 4, color = "black", alpha = 0.5, position = "identity") +
scale_fill_manual(values = c("Youngest" = "blue", "Middle" = "green", "Oldest" = "red")) +
labs(title = "Age Distribution of NSCLC Samples",
x = "Age",
y = "Count",
fill = "Age Group") +
theme_minimal()
# Age distribution of NSCLC samples
ggplot(colData, aes(x = Age, fill = AgeGroup)) +
geom_histogram(binwidth = 2, color = "black", alpha = 0.5, position = "identity") +
scale_fill_manual(values = c("Youngest" = "blue", "Middle" = "green", "Oldest" = "red")) +
labs(title = "Age Distribution of NSCLC Samples",
x = "Age",
y = "Count",
fill = "Age Group") +
theme_minimal()
# Age distribution of NSCLC samples
ggplot(colData, aes(x = Age, fill = AgeGroup)) +
geom_histogram(binwidth = 5, color = "black", alpha = 0.5, position = "identity") +
scale_fill_manual(values = c("Youngest" = "blue", "Middle" = "green", "Oldest" = "red")) +
labs(title = "Age Distribution of NSCLC Samples",
x = "Age",
y = "Count",
fill = "Age Group") +
theme_minimal()
save.pdf(function(){
# Age distribution of NSCLC samples
ggplot(colData, aes(x = Age, fill = AgeGroup)) +
geom_histogram(binwidth = 5, color = "black", alpha = 0.5, position = "identity") +
scale_fill_manual(values = c("Youngest" = "blue", "Middle" = "green", "Oldest" = "red")) +
labs(title = "Age Distribution of NSCLC Samples",
x = "Age",
y = "Count",
fill = "Age Group") +
theme_minimal()
}, "Age Distribution NSCLC Samples")
save.pdf(function(){
# Plot the histogram for healthy data with 'Years' as the x-axis
ggplot(healthy_metadata, aes(x = Years, fill = YearGroup)) +
geom_histogram(binwidth = 3, color = "black", alpha = 0.5, position = "identity") +  # Adjust binwidth if needed
scale_fill_manual(values = c("Young" = "blue", "Middle" = "green", "Old" = "red")) +
labs(title = "Age Distribution of Healthy Samples",
x = "Years",
y = "Count",
fill = "Year Group") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
}, "Age Distribution Healthy Samples")
# Insert MOET output, ie the genes from the DEGs associated with lungdisease
moetgenessource <- read.table("MOET genes lung cancer source ensg.txt", header = FALSE, stringsAsFactors = FALSE)
colnames(moetgenessource) <- c("Gene_Symbol")
# Check overlap with expression data
overlap_moetgenessource <- moetgenessource$Gene_Symbol[moetgenessource$Gene_Symbol %in% rownames(raw_counts)]
# Subset the data for MOET genes
expression_moetgenessource <- raw_counts[rownames(raw_counts) %in% overlap_moetgenessource, ]
# Normalize it
log_overlap_moetgenessource <- log2(as.matrix(expression_moetgenessource) + 1)
# Split Heat Map into 2, Healthy & Non-Healthy
# Separate Tumor (“T”) and Normal (“N”) Samples
# Select columns ending with "T"
tumor_samples <- log_overlap_moetgenessource[, grep("T$", colnames(log_overlap_moetgenessource))]
# Select columns ending with "N"
normal_samples <- log_overlap_moetgenessource[, grep("N$", colnames(log_overlap_moetgenessource))]
### Put them All in One figure
# Order columns: Normal (N) first, Tumor (T) second
ordered_columns <- c(grep("N$", colnames(log_overlap_moetgenessource), value = TRUE),
grep("T$", colnames(log_overlap_moetgenessource), value = TRUE))
log_overlap_moetgenessource <- log_overlap_moetgenessource[, ordered_columns]
# Create a column annotation to distinguish Tumor vs. Normal
sample_types <- ifelse(grepl("T$", colnames(log_overlap_moetgenessource)), "Tumor", "Normal")
annotation_col <- data.frame(Type = factor(sample_types, levels = c("Normal", "Tumor")))
rownames(annotation_col) <- colnames(log_overlap_moetgenessource)
# Plot the heatmap
save.pdf(function(){
pheatmap(log_overlap_moetgenessource,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "row",
show_rownames = TRUE,
show_colnames = TRUE,
annotation_col = annotation_col,  # Highlight Tumor vs. Normal
gaps_col = length(grep("N$", colnames(log_overlap_moetgenessource))), # Add gap between groups
main = "Heatmap of MOET Genes (Normal vs. Tumor)")
}, "Heatmap of MOET Genes (Normal vs. Tumor)")
# Plot the heatmap
pheatmap(log_overlap_moetgenessource,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "row",
show_rownames = TRUE,
show_colnames = TRUE,
annotation_col = annotation_col,  # Highlight Tumor vs. Normal
gaps_col = length(grep("N$", colnames(log_overlap_moetgenessource))), # Add gap between groups
main = "Heatmap of MOET Genes (Normal vs. Tumor)")
# Plot the heatmap
pheatmap(log_overlap_moetgenessource,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "row",
show_rownames = TRUE,
show_colnames = TRUE,
annotation_col = annotation_col,  # Highlight Tumor vs. Normal
gaps_col = length(grep("N$", colnames(log_overlap_moetgenessource))), # Add gap between groups
main = "Heatmap of MOET Genes (Normal vs. Tumor)")
# Plot the heatmap
pheatmap(log_overlap_moetgenessource,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "row",
show_rownames = TRUE,
show_colnames = TRUE,
annotation_col = annotation_col,  # Highlight Tumor vs. Normal
gaps_col = length(grep("N$", colnames(log_overlap_moetgenessource))), # Add gap between groups
main = "Heatmap of MOET Genes (Normal vs. Tumor)")
# Insert MOET output, ie the genes from the DEGs associated with lungdisease
moetgenessource <- read.table("MOET genes lung cancer source ensg.txt", header = FALSE, stringsAsFactors = FALSE)
colnames(moetgenessource) <- c("Gene_Symbol")
# Check overlap with expression data
overlap_moetgenessource <- moetgenessource$Gene_Symbol[moetgenessource$Gene_Symbol %in% rownames(raw_counts)]
# Subset the data for MOET genes
expression_moetgenessource <- raw_counts[rownames(raw_counts) %in% overlap_moetgenessource, ]
# Normalize it
log_overlap_moetgenessource <- log2(as.matrix(expression_moetgenessource) + 1)
# Split Heat Map into 2, Healthy & Non-Healthy
# Separate Tumor (“T”) and Normal (“N”) Samples
# Select columns ending with "T"
tumor_samples <- log_overlap_moetgenessource[, grep("T$", colnames(log_overlap_moetgenessource))]
# Select columns ending with "N"
normal_samples <- log_overlap_moetgenessource[, grep("N$", colnames(log_overlap_moetgenessource))]
### Put them All in One figure
# Order columns: Normal (N) first, Tumor (T) second
ordered_columns <- c(grep("N$", colnames(log_overlap_moetgenessource), value = TRUE),
grep("T$", colnames(log_overlap_moetgenessource), value = TRUE))
log_overlap_moetgenessource <- log_overlap_moetgenessource[, ordered_columns]
# Create a column annotation to distinguish Tumor vs. Normal
sample_types <- ifelse(grepl("T$", colnames(log_overlap_moetgenessource)), "Tumor", "Normal")
annotation_col <- data.frame(Type = factor(sample_types, levels = c("Normal", "Tumor")))
rownames(annotation_col) <- colnames(log_overlap_moetgenessource)
# Plot the heatmap
pheatmap(log_overlap_moetgenessource,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "row",
show_rownames = TRUE,
show_colnames = TRUE,
annotation_col = annotation_col,  # Highlight Tumor vs. Normal
gaps_col = length(grep("N$", colnames(log_overlap_moetgenessource))), # Add gap between groups
main = "Heatmap of MOET Genes (Normal vs. Tumor)")
# Plot the heatmap
pheatmap(log_overlap_moetgenessource,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "row",
show_rownames = TRUE,
show_colnames = TRUE,
annotation_col = annotation_col,  # Highlight Tumor vs. Normal
gaps_col = length(grep("N$", colnames(log_overlap_moetgenessource))), # Add gap between groups
main = "Heatmap of MOET Genes (Normal vs. Tumor)")
setwd("~/Maastricht University/Biomedical Sciences/BMS year 3/BBS3004 - Critical Review of a Biomedical Intervention/GitHub")
# Insert MOET output, ie the genes from the DEGs associated with lungdisease
moetgenessource <- read.table("MOET genes lung cancer source ensg.txt", header = FALSE, stringsAsFactors = FALSE)
colnames(moetgenessource) <- c("Gene_Symbol")
# Check overlap with expression data
overlap_moetgenessource <- moetgenessource$Gene_Symbol[moetgenessource$Gene_Symbol %in% rownames(raw_counts)]
# Subset the data for MOET genes
expression_moetgenessource <- raw_counts[rownames(raw_counts) %in% overlap_moetgenessource, ]
# Normalize it
log_overlap_moetgenessource <- log2(as.matrix(expression_moetgenessource) + 1)
# Split Heat Map into 2, Healthy & Non-Healthy
# Separate Tumor (“T”) and Normal (“N”) Samples
# Select columns ending with "T"
tumor_samples <- log_overlap_moetgenessource[, grep("T$", colnames(log_overlap_moetgenessource))]
# Select columns ending with "N"
normal_samples <- log_overlap_moetgenessource[, grep("N$", colnames(log_overlap_moetgenessource))]
### Put them All in One figure
# Order columns: Normal (N) first, Tumor (T) second
ordered_columns <- c(grep("N$", colnames(log_overlap_moetgenessource), value = TRUE),
grep("T$", colnames(log_overlap_moetgenessource), value = TRUE))
log_overlap_moetgenessource <- log_overlap_moetgenessource[, ordered_columns]
# Create a column annotation to distinguish Tumor vs. Normal
sample_types <- ifelse(grepl("T$", colnames(log_overlap_moetgenessource)), "Tumor", "Normal")
annotation_col <- data.frame(Type = factor(sample_types, levels = c("Normal", "Tumor")))
rownames(annotation_col) <- colnames(log_overlap_moetgenessource)
# Plot the heatmap
pheatmap(log_overlap_moetgenessource,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "row",
show_rownames = TRUE,
show_colnames = TRUE,
annotation_col = annotation_col,  # Highlight Tumor vs. Normal
gaps_col = length(grep("N$", colnames(log_overlap_moetgenessource))), # Add gap between groups
main = "Heatmap of MOET Genes (Normal vs. Tumor)")
# Insert MOET output, ie the genes from the DEGs associated with lungdisease
moetgenessource <- read.table("moet_log2_EnsembleID.txt", header = FALSE, stringsAsFactors = FALSE)
colnames(moetgenessource) <- c("Gene_Symbol")
# Check overlap with expression data
overlap_moetgenessource <- moetgenessource$Gene_Symbol[moetgenessource$Gene_Symbol %in% rownames(raw_counts)]
# Subset the data for MOET genes
expression_moetgenessource <- raw_counts[rownames(raw_counts) %in% overlap_moetgenessource, ]
# Normalize it
log_overlap_moetgenessource <- log2(as.matrix(expression_moetgenessource) + 1)
# Split Heat Map into 2, Healthy & Non-Healthy
# Separate Tumor (“T”) and Normal (“N”) Samples
# Select columns ending with "T"
tumor_samples <- log_overlap_moetgenessource[, grep("T$", colnames(log_overlap_moetgenessource))]
# Select columns ending with "N"
normal_samples <- log_overlap_moetgenessource[, grep("N$", colnames(log_overlap_moetgenessource))]
### Put them All in One figure
# Order columns: Normal (N) first, Tumor (T) second
ordered_columns <- c(grep("N$", colnames(log_overlap_moetgenessource), value = TRUE),
grep("T$", colnames(log_overlap_moetgenessource), value = TRUE))
log_overlap_moetgenessource <- log_overlap_moetgenessource[, ordered_columns]
# Create a column annotation to distinguish Tumor vs. Normal
sample_types <- ifelse(grepl("T$", colnames(log_overlap_moetgenessource)), "Tumor", "Normal")
annotation_col <- data.frame(Type = factor(sample_types, levels = c("Normal", "Tumor")))
rownames(annotation_col) <- colnames(log_overlap_moetgenessource)
# Plot the heatmap
pheatmap(log_overlap_moetgenessource,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "row",
show_rownames = TRUE,
show_colnames = TRUE,
annotation_col = annotation_col,  # Highlight Tumor vs. Normal
gaps_col = length(grep("N$", colnames(log_overlap_moetgenessource))), # Add gap between groups
main = "Heatmap of MOET Genes (Normal vs. Tumor)")
# Plot the heatmap
pheatmap(log_overlap_moetgenessource,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "row",
show_rownames = TRUE,
show_colnames = TRUE,
annotation_col = annotation_col,  # Highlight Tumor vs. Normal
gaps_col = length(grep("N$", colnames(log_overlap_moetgenessource))), # Add gap between groups
main = "Heatmap of MOET Genes (Normal vs. Tumor)")
# Insert MOET output, ie the genes from the DEGs associated with lungdisease
moetgenessource <- read.table("MOET genes lung cancer source ensg.txt", header = FALSE, stringsAsFactors = FALSE)
colnames(moetgenessource) <- c("Gene_Symbol")
# Check overlap with expression data
overlap_moetgenessource <- moetgenessource$Gene_Symbol[moetgenessource$Gene_Symbol %in% rownames(raw_counts)]
# Subset the data for MOET genes
expression_moetgenessource <- raw_counts[rownames(raw_counts) %in% overlap_moetgenessource, ]
# Normalize it
log_overlap_moetgenessource <- log2(as.matrix(expression_moetgenessource) + 1)
# Split Heat Map into 2, Healthy & Non-Healthy
# Separate Tumor (“T”) and Normal (“N”) Samples
# Select columns ending with "T"
tumor_samples <- log_overlap_moetgenessource[, grep("T$", colnames(log_overlap_moetgenessource))]
# Select columns ending with "N"
normal_samples <- log_overlap_moetgenessource[, grep("N$", colnames(log_overlap_moetgenessource))]
### Put them All in One figure
# Order columns: Normal (N) first, Tumor (T) second
ordered_columns <- c(grep("N$", colnames(log_overlap_moetgenessource), value = TRUE),
grep("T$", colnames(log_overlap_moetgenessource), value = TRUE))
log_overlap_moetgenessource <- log_overlap_moetgenessource[, ordered_columns]
# Create a column annotation to distinguish Tumor vs. Normal
sample_types <- ifelse(grepl("T$", colnames(log_overlap_moetgenessource)), "Tumor", "Normal")
annotation_col <- data.frame(Type = factor(sample_types, levels = c("Normal", "Tumor")))
rownames(annotation_col) <- colnames(log_overlap_moetgenessource)
# Plot the heatmap
pheatmap(log_overlap_moetgenessource,
cluster_rows = TRUE,
cluster_cols = TRUE,
scale = "row",
show_rownames = TRUE,
show_colnames = TRUE,
annotation_col = annotation_col,  # Highlight Tumor vs. Normal
gaps_col = length(grep("N$", colnames(log_overlap_moetgenessource))), # Add gap between groups
main = "Heatmap of MOET Genes (Normal vs. Tumor)")
View(res_df)
library(biomaRt)
1.23*10^-2
1.23*10^-3
#GRP, CHGA, ABCC2, THBD
ensembl_ids <- c("ENSG00000134443", "ENSG00000100604", "ENSG00000023839", "ENSG00000178726") # Add your full list here
# extract old vs young data
OldvsYoung <- read.delim("AgeGroup_Old_vs_Young.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# extract old vs young data
OldvsMiddle <- read.delim("AgeGroup_Old_vs_Middle.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# extract old vs young data
OldvsYoung <- read.delim("AgeGroup_Old_vs_Young.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# extract old vs young data
OldvsMiddle <- read.delim("AgeGroup_Old_vs_Middle.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# Filter the results table for only these Ensembl IDs
filtered_results <- OldvsYoung[rownames(OldvsYoung) %in% ensembl_ids, ]
head(filtered_results)
# Add significance column
filtered_results$significance <- ifelse(
filtered_results$padj < 0.05 & abs(filtered_results$log2FoldChange) > 1,
"Significant",
"Not Significant"
)
head(filtered_results)
# Classify genes as Upregulated, Downregulated, or Not Significant
filtered_results$Regulation <- case_when(
filtered_results$padj < 0.05 & filtered_results$log2FoldChange > 1  ~ "Upregulated",
filtered_results$padj < 0.05 & filtered_results$log2FoldChange < -1 ~ "Downregulated",
TRUE ~ "Not significant"
)
head(filtered_results)
# Filter the results table for only these Ensembl IDs
filtered_results <- OldvsYoung[rownames(OldvsYoung) %in% ensembl_ids, ]
# Classify genes as Upregulated, Downregulated, or Not Significant
filtered_results$Regulation <- case_when(
filtered_results$padj < 0.05 & filtered_results$log2FoldChange > 1  ~ "Upregulated",
filtered_results$padj < 0.05 & filtered_results$log2FoldChange < -1 ~ "Downregulated",
TRUE ~ "Not significant"
)
head(filtered_results)
# Filter the results table for only these Ensembl IDs
filtered_results <- OldvsYoung[rownames(OldvsYoung) %in% ensembl_ids, ]
# Classify genes as Upregulated, Downregulated, or Not Significant
filtered_results$Significance <- case_when(
filtered_results$padj < 0.05 & filtered_results$log2FoldChange > 1  ~ "Upregulated",
filtered_results$padj < 0.05 & filtered_results$log2FoldChange < -1 ~ "Downregulated",
TRUE ~ "Not significant"
)
head(filtered_results)
1.23*10^-3
1.23*10^-3
1.23*10^-4
filtered_results <- as.matrix(filtered_results)
# Convert to matrix format
filtered_results <- as.matrix(filtered_results)
# Scale data (row-wise) to emphasize differences
expr_scaled <- t(scale(t(filtered_results)))
# Extract log2FoldChange values for the genes of interest
gene_expression_matrix <- as.matrix(filtered_results[, "log2FoldChange", drop = FALSE])
# Create a heatmap
pheatmap(gene_expression_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Expression of Selected Genes in NSCLC")
# Convert to matrix format
filtered_results <- as.matrix(filtered_results)
filtered_results
filtered_results$log2FoldChange <- as.numeric(filtered_results$log2FoldChange)
filtered_results[1]
filtered_results[4]
filtered_results[[3]]
# Convert to matrix format
filtered_results <- as.matrix(filtered_results)
# Extract log2FoldChange values for the genes of interest
gene_expression_matrix <- as.matrix(filtered_results[, "log2FoldChange", drop = FALSE])
# Create a heatmap
pheatmap(gene_expression_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Expression of Selected Genes in NSCLC")
# Convert to matrix format
filtered_results <- as.matrix(filtered_results)
# Ensure log2FoldChange is numeric
filtered_results[, "log2FoldChange"] <- as.numeric(filtered_results[, "log2FoldChange"])
# Extract log2FoldChange values for the genes of interest
gene_expression_matrix <- as.matrix(filtered_results[, "log2FoldChange", drop = FALSE])
# Create a heatmap
pheatmap(
gene_expression_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Expression of Selected Genes in NSCLC"
)
# Convert log2FoldChange column to numeric, ensuring no character issues
filtered_results$log2FoldChange <- as.numeric(as.character(filtered_results$log2FoldChange))
# Convert log2FoldChange column to numeric, ensuring no character issues
filtered_results[, "log2FoldChange"] <- as.numeric(as.character(filtered_results$log2FoldChange))
# Convert log2FoldChange column to numeric, ensuring no character issues
filtered_results[, "log2FoldChange"] <- as.numeric(as.character(filtered_results[, "log2FoldChange"]))
# Convert to matrix format
filtered_results_matrix <- as.matrix(filtered_results)
# Extract log2FoldChange values for the genes of interest
gene_expression_matrix <- as.matrix(filtered_results_matrix[, "log2FoldChange", drop = FALSE])
# Check if all values are numeric
print(str(gene_expression_matrix))  # Debugging step
# Create a heatmap
pheatmap(
gene_expression_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Expression of Selected Genes in NSCLC"
)
filtered_results
# Check if all values are numeric
print(str(gene_expression_matrix))  # Debugging step
# Convert log2FoldChange column to numeric, ensuring no character issues
filtered_results[, "log2FoldChange"] <- as.numeric(as.character(filtered_results[, "log2FoldChange"]))
# Convert to matrix format
filtered_results_matrix <- as.matrix(filtered_results)
# Extract log2FoldChange values for the genes of interest
gene_expression_matrix <- as.matrix(filtered_results_matrix[, "log2FoldChange", drop = FALSE])
# Check if all values are numeric
print(str(gene_expression_matrix))  # Debugging step
# Create a heatmap
pheatmap(
gene_expression_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Expression of Selected Genes in NSCLC"
)
#GRP, CHGA, ABCC2, THBD
ensembl_ids <- c("ENSG00000134443", "ENSG00000100604", "ENSG00000023839", "ENSG00000178726") # Add your full list here
# extract old vs young data
OldvsYoung <- read.delim("AgeGroup_Old_vs_Young.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# Filter the results table for only these Ensembl IDs
filtered_results <- OldvsYoung[rownames(OldvsYoung) %in% ensembl_ids, ]
# Classify genes as Upregulated, Downregulated, or Not Significant
filtered_results$Significance <- case_when(
filtered_results$padj < 0.05 & filtered_results$log2FoldChange > 1  ~ "Upregulated",
filtered_results$padj < 0.05 & filtered_results$log2FoldChange < -1 ~ "Downregulated",
TRUE ~ "Not significant"
)
# Convert log2FoldChange column to numeric, ensuring no character issues
filtered_results[, "log2FoldChange"] <- as.numeric(as.character(filtered_results[, "log2FoldChange"]))
# Convert log2FoldChange column to numeric, ensuring no character issues
filtered_results$log2FoldChange <- as.numeric(as.character(filtered_results[, "log2FoldChange"]))
filtered_results
# Convert to matrix format
filtered_results_matrix <- as.matrix(filtered_results)
# Extract log2FoldChange values for the genes of interest
gene_expression_matrix <- as.matrix(filtered_results_matrix[, "log2FoldChange", drop = FALSE])
# Check if all values are numeric
print(str(gene_expression_matrix))  # Debugging step
# Create a heatmap
pheatmap(
gene_expression_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Expression of Selected Genes in NSCLC"
)
#GRP, CHGA, ABCC2, THBD
ensembl_ids <- c("ENSG00000134443", "ENSG00000100604", "ENSG00000023839", "ENSG00000178726") # Add your full list here
# extract old vs young data
OldvsYoung <- read.delim("AgeGroup_Old_vs_Young.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# Filter the results table for only these Ensembl IDs
filtered_results <- OldvsYoung[rownames(OldvsYoung) %in% ensembl_ids, ]
# Classify genes as Upregulated, Downregulated, or Not Significant
filtered_results$Significance <- case_when(
filtered_results$padj < 0.05 & filtered_results$log2FoldChange > 1  ~ "Upregulated",
filtered_results$padj < 0.05 & filtered_results$log2FoldChange < -1 ~ "Downregulated",
TRUE ~ "Not significant"
)
# Ensure log2FoldChange is numeric
filtered_results$log2FoldChange <- as.numeric(as.character(filtered_results$log2FoldChange))
# Convert to matrix format
filtered_results_matrix <- as.matrix(filtered_results)
# Extract log2FoldChange values for the genes of interest
gene_expression_matrix <- as.matrix(filtered_results_matrix[, "log2FoldChange", drop = FALSE])
# Check if all values are numeric
print(str(gene_expression_matrix))  # Should show 'num' instead of 'chr'
# Create a heatmap
pheatmap(
gene_expression_matrix,
cluster_rows = FALSE,
cluster_cols = FALSE,
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Expression of Selected Genes in NSCLC"
)
#GRP, CHGA, ABCC2, THBD
ensembl_ids <- c("ENSG00000134443", "ENSG00000100604", "ENSG00000023839", "ENSG00000178726") # Add your full list here
# extract old vs young data
OldvsYoung <- read.delim("AgeGroup_Old_vs_Young.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
#GRP, CHGA, ABCC2, THBD
ensembl_ids <- c("ENSG00000134443", "ENSG00000100604", "ENSG00000023839", "ENSG00000178726") # Add your full list here
# extract old vs young data
OldvsYoung <- read.delim("AgeGroup_Old_vs_Young.tsv", header=TRUE,
row.names=1, sep="\t", check.names=FALSE)
# Filter the results table for only these Ensembl IDs
filtered_results <- OldvsYoung[rownames(OldvsYoung) %in% ensembl_ids, ]
# Classify genes as Upregulated, Downregulated, or Not Significant
filtered_results$Significance <- case_when(
filtered_results$padj < 0.05 & filtered_results$log2FoldChange > 1  ~ "Upregulated",
filtered_results$padj < 0.05 & filtered_results$log2FoldChange < -1 ~ "Downregulated",
TRUE ~ "Not significant"
)
# Ensure log2FoldChange is numeric
filtered_results$log2FoldChange <- as.numeric(filtered_results$log2FoldChange)
# Remove any rows with NA values after conversion
filtered_results <- na.omit(filtered_results)
# Create a numeric matrix with row names as Gene IDs
gene_expression_matrix <- matrix(
filtered_results$log2FoldChange,
nrow = nrow(filtered_results),
dimnames = list(rownames(filtered_results), "log2FoldChange")
)
# Check if all values are numeric
print(str(gene_expression_matrix))  # This should return "num"
# Create a heatmap
pheatmap(
gene_expression_matrix,
cluster_rows = TRUE,
cluster_cols = FALSE,
color = colorRampPalette(c("blue", "white", "red"))(100),
main = "Expression of Selected Genes in NSCLC"
)
